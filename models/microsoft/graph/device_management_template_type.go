package graph
import (
    "strings"
    "errors"
)
// 
type DeviceManagementTemplateType int

const (
    SECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE DeviceManagementTemplateType = iota
    SPECIALIZEDDEVICES_DEVICEMANAGEMENTTEMPLATETYPE
    ADVANCEDTHREATPROTECTIONSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
    DEVICECONFIGURATION_DEVICEMANAGEMENTTEMPLATETYPE
    CUSTOM_DEVICEMANAGEMENTTEMPLATETYPE
    SECURITYTEMPLATE_DEVICEMANAGEMENTTEMPLATETYPE
    MICROSOFTEDGESECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
    MICROSOFTOFFICE365PROPLUSSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
    DEVICECOMPLIANCE_DEVICEMANAGEMENTTEMPLATETYPE
    DEVICECONFIGURATIONFOROFFICE365_DEVICEMANAGEMENTTEMPLATETYPE
    CLOUDPC_DEVICEMANAGEMENTTEMPLATETYPE
    FIREWALLSHAREDSETTINGS_DEVICEMANAGEMENTTEMPLATETYPE
)

func (i DeviceManagementTemplateType) String() string {
    return []string{"SECURITYBASELINE", "SPECIALIZEDDEVICES", "ADVANCEDTHREATPROTECTIONSECURITYBASELINE", "DEVICECONFIGURATION", "CUSTOM", "SECURITYTEMPLATE", "MICROSOFTEDGESECURITYBASELINE", "MICROSOFTOFFICE365PROPLUSSECURITYBASELINE", "DEVICECOMPLIANCE", "DEVICECONFIGURATIONFOROFFICE365", "CLOUDPC", "FIREWALLSHAREDSETTINGS"}[i]
}
func ParseDeviceManagementTemplateType(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "SECURITYBASELINE":
            return SECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "SPECIALIZEDDEVICES":
            return SPECIALIZEDDEVICES_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "ADVANCEDTHREATPROTECTIONSECURITYBASELINE":
            return ADVANCEDTHREATPROTECTIONSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "DEVICECONFIGURATION":
            return DEVICECONFIGURATION_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "CUSTOM":
            return CUSTOM_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "SECURITYTEMPLATE":
            return SECURITYTEMPLATE_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "MICROSOFTEDGESECURITYBASELINE":
            return MICROSOFTEDGESECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "MICROSOFTOFFICE365PROPLUSSECURITYBASELINE":
            return MICROSOFTOFFICE365PROPLUSSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "DEVICECOMPLIANCE":
            return DEVICECOMPLIANCE_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "DEVICECONFIGURATIONFOROFFICE365":
            return DEVICECONFIGURATIONFOROFFICE365_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "CLOUDPC":
            return CLOUDPC_DEVICEMANAGEMENTTEMPLATETYPE, nil
        case "FIREWALLSHAREDSETTINGS":
            return FIREWALLSHAREDSETTINGS_DEVICEMANAGEMENTTEMPLATETYPE, nil
    }
    return 0, errors.New("Unknown DeviceManagementTemplateType value: " + v)
}
func SerializeDeviceManagementTemplateType(values []DeviceManagementTemplateType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
