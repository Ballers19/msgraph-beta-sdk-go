package graph
import (
    "strings"
    "errors"
)
// 
type Windows10EditionType int

const (
    WINDOWS10ENTERPRISE_WINDOWS10EDITIONTYPE Windows10EditionType = iota
    WINDOWS10ENTERPRISEN_WINDOWS10EDITIONTYPE
    WINDOWS10EDUCATION_WINDOWS10EDITIONTYPE
    WINDOWS10EDUCATIONN_WINDOWS10EDITIONTYPE
    WINDOWS10MOBILEENTERPRISE_WINDOWS10EDITIONTYPE
    WINDOWS10HOLOGRAPHICENTERPRISE_WINDOWS10EDITIONTYPE
    WINDOWS10PROFESSIONAL_WINDOWS10EDITIONTYPE
    WINDOWS10PROFESSIONALN_WINDOWS10EDITIONTYPE
    WINDOWS10PROFESSIONALEDUCATION_WINDOWS10EDITIONTYPE
    WINDOWS10PROFESSIONALEDUCATIONN_WINDOWS10EDITIONTYPE
    WINDOWS10PROFESSIONALWORKSTATION_WINDOWS10EDITIONTYPE
    WINDOWS10PROFESSIONALWORKSTATIONN_WINDOWS10EDITIONTYPE
    NOTCONFIGURED_WINDOWS10EDITIONTYPE
    WINDOWS10HOME_WINDOWS10EDITIONTYPE
    WINDOWS10HOMECHINA_WINDOWS10EDITIONTYPE
    WINDOWS10HOMEN_WINDOWS10EDITIONTYPE
    WINDOWS10HOMESINGLELANGUAGE_WINDOWS10EDITIONTYPE
    WINDOWS10MOBILE_WINDOWS10EDITIONTYPE
    WINDOWS10IOTCORE_WINDOWS10EDITIONTYPE
    WINDOWS10IOTCORECOMMERCIAL_WINDOWS10EDITIONTYPE
)

func (i Windows10EditionType) String() string {
    return []string{"WINDOWS10ENTERPRISE", "WINDOWS10ENTERPRISEN", "WINDOWS10EDUCATION", "WINDOWS10EDUCATIONN", "WINDOWS10MOBILEENTERPRISE", "WINDOWS10HOLOGRAPHICENTERPRISE", "WINDOWS10PROFESSIONAL", "WINDOWS10PROFESSIONALN", "WINDOWS10PROFESSIONALEDUCATION", "WINDOWS10PROFESSIONALEDUCATIONN", "WINDOWS10PROFESSIONALWORKSTATION", "WINDOWS10PROFESSIONALWORKSTATIONN", "NOTCONFIGURED", "WINDOWS10HOME", "WINDOWS10HOMECHINA", "WINDOWS10HOMEN", "WINDOWS10HOMESINGLELANGUAGE", "WINDOWS10MOBILE", "WINDOWS10IOTCORE", "WINDOWS10IOTCORECOMMERCIAL"}[i]
}
func ParseWindows10EditionType(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "WINDOWS10ENTERPRISE":
            return WINDOWS10ENTERPRISE_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10ENTERPRISEN":
            return WINDOWS10ENTERPRISEN_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10EDUCATION":
            return WINDOWS10EDUCATION_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10EDUCATIONN":
            return WINDOWS10EDUCATIONN_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10MOBILEENTERPRISE":
            return WINDOWS10MOBILEENTERPRISE_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10HOLOGRAPHICENTERPRISE":
            return WINDOWS10HOLOGRAPHICENTERPRISE_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10PROFESSIONAL":
            return WINDOWS10PROFESSIONAL_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10PROFESSIONALN":
            return WINDOWS10PROFESSIONALN_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10PROFESSIONALEDUCATION":
            return WINDOWS10PROFESSIONALEDUCATION_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10PROFESSIONALEDUCATIONN":
            return WINDOWS10PROFESSIONALEDUCATIONN_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10PROFESSIONALWORKSTATION":
            return WINDOWS10PROFESSIONALWORKSTATION_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10PROFESSIONALWORKSTATIONN":
            return WINDOWS10PROFESSIONALWORKSTATIONN_WINDOWS10EDITIONTYPE, nil
        case "NOTCONFIGURED":
            return NOTCONFIGURED_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10HOME":
            return WINDOWS10HOME_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10HOMECHINA":
            return WINDOWS10HOMECHINA_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10HOMEN":
            return WINDOWS10HOMEN_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10HOMESINGLELANGUAGE":
            return WINDOWS10HOMESINGLELANGUAGE_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10MOBILE":
            return WINDOWS10MOBILE_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10IOTCORE":
            return WINDOWS10IOTCORE_WINDOWS10EDITIONTYPE, nil
        case "WINDOWS10IOTCORECOMMERCIAL":
            return WINDOWS10IOTCORECOMMERCIAL_WINDOWS10EDITIONTYPE, nil
    }
    return 0, errors.New("Unknown Windows10EditionType value: " + v)
}
func SerializeWindows10EditionType(values []Windows10EditionType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
