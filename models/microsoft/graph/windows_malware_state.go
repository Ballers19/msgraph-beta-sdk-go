package graph
import (
    "strings"
    "errors"
)
// 
type WindowsMalwareState int

const (
    UNKNOWN_WINDOWSMALWARESTATE WindowsMalwareState = iota
    DETECTED_WINDOWSMALWARESTATE
    CLEANED_WINDOWSMALWARESTATE
    QUARANTINED_WINDOWSMALWARESTATE
    REMOVED_WINDOWSMALWARESTATE
    ALLOWED_WINDOWSMALWARESTATE
    BLOCKED_WINDOWSMALWARESTATE
    CLEANFAILED_WINDOWSMALWARESTATE
    QUARANTINEFAILED_WINDOWSMALWARESTATE
    REMOVEFAILED_WINDOWSMALWARESTATE
    ALLOWFAILED_WINDOWSMALWARESTATE
    ABANDONED_WINDOWSMALWARESTATE
    BLOCKFAILED_WINDOWSMALWARESTATE
)

func (i WindowsMalwareState) String() string {
    return []string{"UNKNOWN", "DETECTED", "CLEANED", "QUARANTINED", "REMOVED", "ALLOWED", "BLOCKED", "CLEANFAILED", "QUARANTINEFAILED", "REMOVEFAILED", "ALLOWFAILED", "ABANDONED", "BLOCKFAILED"}[i]
}
func ParseWindowsMalwareState(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            return UNKNOWN_WINDOWSMALWARESTATE, nil
        case "DETECTED":
            return DETECTED_WINDOWSMALWARESTATE, nil
        case "CLEANED":
            return CLEANED_WINDOWSMALWARESTATE, nil
        case "QUARANTINED":
            return QUARANTINED_WINDOWSMALWARESTATE, nil
        case "REMOVED":
            return REMOVED_WINDOWSMALWARESTATE, nil
        case "ALLOWED":
            return ALLOWED_WINDOWSMALWARESTATE, nil
        case "BLOCKED":
            return BLOCKED_WINDOWSMALWARESTATE, nil
        case "CLEANFAILED":
            return CLEANFAILED_WINDOWSMALWARESTATE, nil
        case "QUARANTINEFAILED":
            return QUARANTINEFAILED_WINDOWSMALWARESTATE, nil
        case "REMOVEFAILED":
            return REMOVEFAILED_WINDOWSMALWARESTATE, nil
        case "ALLOWFAILED":
            return ALLOWFAILED_WINDOWSMALWARESTATE, nil
        case "ABANDONED":
            return ABANDONED_WINDOWSMALWARESTATE, nil
        case "BLOCKFAILED":
            return BLOCKFAILED_WINDOWSMALWARESTATE, nil
    }
    return 0, errors.New("Unknown WindowsMalwareState value: " + v)
}
func SerializeWindowsMalwareState(values []WindowsMalwareState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
