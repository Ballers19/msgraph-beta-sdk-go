package graph
import (
    "strings"
    "errors"
)
// 
type ConditionalAccessConditions int

const (
    NONE_CONDITIONALACCESSCONDITIONS ConditionalAccessConditions = iota
    APPLICATION_CONDITIONALACCESSCONDITIONS
    USERS_CONDITIONALACCESSCONDITIONS
    DEVICEPLATFORM_CONDITIONALACCESSCONDITIONS
    LOCATION_CONDITIONALACCESSCONDITIONS
    CLIENTTYPE_CONDITIONALACCESSCONDITIONS
    SIGNINRISK_CONDITIONALACCESSCONDITIONS
    USERRISK_CONDITIONALACCESSCONDITIONS
    TIME_CONDITIONALACCESSCONDITIONS
    DEVICESTATE_CONDITIONALACCESSCONDITIONS
    CLIENT_CONDITIONALACCESSCONDITIONS
    IPADDRESSSEENBYAZUREAD_CONDITIONALACCESSCONDITIONS
    IPADDRESSSEENBYRESOURCEPROVIDER_CONDITIONALACCESSCONDITIONS
    UNKNOWNFUTUREVALUE_CONDITIONALACCESSCONDITIONS
    SERVICEPRINCIPALS_CONDITIONALACCESSCONDITIONS
    SERVICEPRINCIPALRISK_CONDITIONALACCESSCONDITIONS
)

func (i ConditionalAccessConditions) String() string {
    return []string{"NONE", "APPLICATION", "USERS", "DEVICEPLATFORM", "LOCATION", "CLIENTTYPE", "SIGNINRISK", "USERRISK", "TIME", "DEVICESTATE", "CLIENT", "IPADDRESSSEENBYAZUREAD", "IPADDRESSSEENBYRESOURCEPROVIDER", "UNKNOWNFUTUREVALUE", "SERVICEPRINCIPALS", "SERVICEPRINCIPALRISK"}[i]
}
func ParseConditionalAccessConditions(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "NONE":
            return NONE_CONDITIONALACCESSCONDITIONS, nil
        case "APPLICATION":
            return APPLICATION_CONDITIONALACCESSCONDITIONS, nil
        case "USERS":
            return USERS_CONDITIONALACCESSCONDITIONS, nil
        case "DEVICEPLATFORM":
            return DEVICEPLATFORM_CONDITIONALACCESSCONDITIONS, nil
        case "LOCATION":
            return LOCATION_CONDITIONALACCESSCONDITIONS, nil
        case "CLIENTTYPE":
            return CLIENTTYPE_CONDITIONALACCESSCONDITIONS, nil
        case "SIGNINRISK":
            return SIGNINRISK_CONDITIONALACCESSCONDITIONS, nil
        case "USERRISK":
            return USERRISK_CONDITIONALACCESSCONDITIONS, nil
        case "TIME":
            return TIME_CONDITIONALACCESSCONDITIONS, nil
        case "DEVICESTATE":
            return DEVICESTATE_CONDITIONALACCESSCONDITIONS, nil
        case "CLIENT":
            return CLIENT_CONDITIONALACCESSCONDITIONS, nil
        case "IPADDRESSSEENBYAZUREAD":
            return IPADDRESSSEENBYAZUREAD_CONDITIONALACCESSCONDITIONS, nil
        case "IPADDRESSSEENBYRESOURCEPROVIDER":
            return IPADDRESSSEENBYRESOURCEPROVIDER_CONDITIONALACCESSCONDITIONS, nil
        case "UNKNOWNFUTUREVALUE":
            return UNKNOWNFUTUREVALUE_CONDITIONALACCESSCONDITIONS, nil
        case "SERVICEPRINCIPALS":
            return SERVICEPRINCIPALS_CONDITIONALACCESSCONDITIONS, nil
        case "SERVICEPRINCIPALRISK":
            return SERVICEPRINCIPALRISK_CONDITIONALACCESSCONDITIONS, nil
    }
    return 0, errors.New("Unknown ConditionalAccessConditions value: " + v)
}
func SerializeConditionalAccessConditions(values []ConditionalAccessConditions) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
