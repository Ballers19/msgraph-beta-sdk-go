package graph
import (
    "strings"
    "errors"
)
// 
type QuarantineReason int

const (
    ENCOUNTEREDBASEESCROWTHRESHOLD_QUARANTINEREASON QuarantineReason = iota
    ENCOUNTEREDTOTALESCROWTHRESHOLD_QUARANTINEREASON
    ENCOUNTEREDESCROWPROPORTIONTHRESHOLD_QUARANTINEREASON
    ENCOUNTEREDQUARANTINEEXCEPTION_QUARANTINEREASON
    UNKNOWN_QUARANTINEREASON
    QUARANTINEDONDEMAND_QUARANTINEREASON
    TOOMANYDELETES_QUARANTINEREASON
    INGESTIONINTERRUPTED_QUARANTINEREASON
)

func (i QuarantineReason) String() string {
    return []string{"ENCOUNTEREDBASEESCROWTHRESHOLD", "ENCOUNTEREDTOTALESCROWTHRESHOLD", "ENCOUNTEREDESCROWPROPORTIONTHRESHOLD", "ENCOUNTEREDQUARANTINEEXCEPTION", "UNKNOWN", "QUARANTINEDONDEMAND", "TOOMANYDELETES", "INGESTIONINTERRUPTED"}[i]
}
func ParseQuarantineReason(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "ENCOUNTEREDBASEESCROWTHRESHOLD":
            return ENCOUNTEREDBASEESCROWTHRESHOLD_QUARANTINEREASON, nil
        case "ENCOUNTEREDTOTALESCROWTHRESHOLD":
            return ENCOUNTEREDTOTALESCROWTHRESHOLD_QUARANTINEREASON, nil
        case "ENCOUNTEREDESCROWPROPORTIONTHRESHOLD":
            return ENCOUNTEREDESCROWPROPORTIONTHRESHOLD_QUARANTINEREASON, nil
        case "ENCOUNTEREDQUARANTINEEXCEPTION":
            return ENCOUNTEREDQUARANTINEEXCEPTION_QUARANTINEREASON, nil
        case "UNKNOWN":
            return UNKNOWN_QUARANTINEREASON, nil
        case "QUARANTINEDONDEMAND":
            return QUARANTINEDONDEMAND_QUARANTINEREASON, nil
        case "TOOMANYDELETES":
            return TOOMANYDELETES_QUARANTINEREASON, nil
        case "INGESTIONINTERRUPTED":
            return INGESTIONINTERRUPTED_QUARANTINEREASON, nil
    }
    return 0, errors.New("Unknown QuarantineReason value: " + v)
}
func SerializeQuarantineReason(values []QuarantineReason) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
