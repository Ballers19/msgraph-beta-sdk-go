package graph
import (
    "strings"
    "errors"
)
// 
type ServiceSource int

const (
    UNKNOWN_SERVICESOURCE ServiceSource = iota
    MICROSOFTDEFENDERFORENDPOINT_SERVICESOURCE
    MICROSOFTDEFENDERFORIDENTITY_SERVICESOURCE
    MICROSOFTDEFENDERFORCLOUDAPPS_SERVICESOURCE
    MICROSOFTDEFENDERFOROFFICE365_SERVICESOURCE
    MICROSOFT365DEFENDER_SERVICESOURCE
    AADIDENTITYPROTECTION_SERVICESOURCE
    MICROSOFTAPPGOVERNANCE_SERVICESOURCE
    DATALOSSPREVENTION_SERVICESOURCE
    UNKNOWNFUTUREVALUE_SERVICESOURCE
)

func (i ServiceSource) String() string {
    return []string{"UNKNOWN", "MICROSOFTDEFENDERFORENDPOINT", "MICROSOFTDEFENDERFORIDENTITY", "MICROSOFTDEFENDERFORCLOUDAPPS", "MICROSOFTDEFENDERFOROFFICE365", "MICROSOFT365DEFENDER", "AADIDENTITYPROTECTION", "MICROSOFTAPPGOVERNANCE", "DATALOSSPREVENTION", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseServiceSource(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            return UNKNOWN_SERVICESOURCE, nil
        case "MICROSOFTDEFENDERFORENDPOINT":
            return MICROSOFTDEFENDERFORENDPOINT_SERVICESOURCE, nil
        case "MICROSOFTDEFENDERFORIDENTITY":
            return MICROSOFTDEFENDERFORIDENTITY_SERVICESOURCE, nil
        case "MICROSOFTDEFENDERFORCLOUDAPPS":
            return MICROSOFTDEFENDERFORCLOUDAPPS_SERVICESOURCE, nil
        case "MICROSOFTDEFENDERFOROFFICE365":
            return MICROSOFTDEFENDERFOROFFICE365_SERVICESOURCE, nil
        case "MICROSOFT365DEFENDER":
            return MICROSOFT365DEFENDER_SERVICESOURCE, nil
        case "AADIDENTITYPROTECTION":
            return AADIDENTITYPROTECTION_SERVICESOURCE, nil
        case "MICROSOFTAPPGOVERNANCE":
            return MICROSOFTAPPGOVERNANCE_SERVICESOURCE, nil
        case "DATALOSSPREVENTION":
            return DATALOSSPREVENTION_SERVICESOURCE, nil
        case "UNKNOWNFUTUREVALUE":
            return UNKNOWNFUTUREVALUE_SERVICESOURCE, nil
    }
    return 0, errors.New("Unknown ServiceSource value: " + v)
}
func SerializeServiceSource(values []ServiceSource) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
