package graph
import (
    "strings"
    "errors"
)
type MacOSSoftwareUpdateState int

const (
    SUCCESS_MACOSSOFTWAREUPDATESTATE MacOSSoftwareUpdateState = iota
    DOWNLOADING_MACOSSOFTWAREUPDATESTATE
    DOWNLOADED_MACOSSOFTWAREUPDATESTATE
    INSTALLING_MACOSSOFTWAREUPDATESTATE
    IDLE_MACOSSOFTWAREUPDATESTATE
    AVAILABLE_MACOSSOFTWAREUPDATESTATE
    SCHEDULED_MACOSSOFTWAREUPDATESTATE
    DOWNLOADFAILED_MACOSSOFTWAREUPDATESTATE
    DOWNLOADINSUFFICIENTSPACE_MACOSSOFTWAREUPDATESTATE
    DOWNLOADINSUFFICIENTPOWER_MACOSSOFTWAREUPDATESTATE
    DOWNLOADINSUFFICIENTNETWORK_MACOSSOFTWAREUPDATESTATE
    INSTALLINSUFFICIENTSPACE_MACOSSOFTWAREUPDATESTATE
    INSTALLINSUFFICIENTPOWER_MACOSSOFTWAREUPDATESTATE
    INSTALLFAILED_MACOSSOFTWAREUPDATESTATE
    COMMANDFAILED_MACOSSOFTWAREUPDATESTATE
)

func (i MacOSSoftwareUpdateState) String() string {
    return []string{"SUCCESS", "DOWNLOADING", "DOWNLOADED", "INSTALLING", "IDLE", "AVAILABLE", "SCHEDULED", "DOWNLOADFAILED", "DOWNLOADINSUFFICIENTSPACE", "DOWNLOADINSUFFICIENTPOWER", "DOWNLOADINSUFFICIENTNETWORK", "INSTALLINSUFFICIENTSPACE", "INSTALLINSUFFICIENTPOWER", "INSTALLFAILED", "COMMANDFAILED"}[i]
}
func ParseMacOSSoftwareUpdateState(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "SUCCESS":
            return SUCCESS_MACOSSOFTWAREUPDATESTATE, nil
        case "DOWNLOADING":
            return DOWNLOADING_MACOSSOFTWAREUPDATESTATE, nil
        case "DOWNLOADED":
            return DOWNLOADED_MACOSSOFTWAREUPDATESTATE, nil
        case "INSTALLING":
            return INSTALLING_MACOSSOFTWAREUPDATESTATE, nil
        case "IDLE":
            return IDLE_MACOSSOFTWAREUPDATESTATE, nil
        case "AVAILABLE":
            return AVAILABLE_MACOSSOFTWAREUPDATESTATE, nil
        case "SCHEDULED":
            return SCHEDULED_MACOSSOFTWAREUPDATESTATE, nil
        case "DOWNLOADFAILED":
            return DOWNLOADFAILED_MACOSSOFTWAREUPDATESTATE, nil
        case "DOWNLOADINSUFFICIENTSPACE":
            return DOWNLOADINSUFFICIENTSPACE_MACOSSOFTWAREUPDATESTATE, nil
        case "DOWNLOADINSUFFICIENTPOWER":
            return DOWNLOADINSUFFICIENTPOWER_MACOSSOFTWAREUPDATESTATE, nil
        case "DOWNLOADINSUFFICIENTNETWORK":
            return DOWNLOADINSUFFICIENTNETWORK_MACOSSOFTWAREUPDATESTATE, nil
        case "INSTALLINSUFFICIENTSPACE":
            return INSTALLINSUFFICIENTSPACE_MACOSSOFTWAREUPDATESTATE, nil
        case "INSTALLINSUFFICIENTPOWER":
            return INSTALLINSUFFICIENTPOWER_MACOSSOFTWAREUPDATESTATE, nil
        case "INSTALLFAILED":
            return INSTALLFAILED_MACOSSOFTWAREUPDATESTATE, nil
        case "COMMANDFAILED":
            return COMMANDFAILED_MACOSSOFTWAREUPDATESTATE, nil
    }
    return 0, errors.New("Unknown MacOSSoftwareUpdateState value: " + v)
}
func SerializeMacOSSoftwareUpdateState(values []MacOSSoftwareUpdateState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
