package graph
import (
    "strings"
    "errors"
)
type DeviceComplianceScriptRulOperator int

const (
    NONE_DEVICECOMPLIANCESCRIPTRULOPERATOR DeviceComplianceScriptRulOperator = iota
    AND_DEVICECOMPLIANCESCRIPTRULOPERATOR
    OR_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ISEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    GREATERTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    LESSTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    BETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    GREATEREQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    LESSEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    DAYTIMEBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    BEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTBEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    CONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTCONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ALLOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    SETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ORDEREDSETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    SUBSETOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    EXCLUDESALL_DEVICECOMPLIANCESCRIPTRULOPERATOR
)

func (i DeviceComplianceScriptRulOperator) String() string {
    return []string{"NONE", "AND", "OR", "ISEQUALS", "NOTEQUALS", "GREATERTHAN", "LESSTHAN", "BETWEEN", "NOTBETWEEN", "GREATEREQUALS", "LESSEQUALS", "DAYTIMEBETWEEN", "BEGINSWITH", "NOTBEGINSWITH", "ENDSWITH", "NOTENDSWITH", "CONTAINS", "NOTCONTAINS", "ALLOF", "ONEOF", "NONEOF", "SETEQUALS", "ORDEREDSETEQUALS", "SUBSETOF", "EXCLUDESALL"}[i]
}
func ParseDeviceComplianceScriptRulOperator(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "NONE":
            return NONE_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "AND":
            return AND_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "OR":
            return OR_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "ISEQUALS":
            return ISEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "NOTEQUALS":
            return NOTEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "GREATERTHAN":
            return GREATERTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "LESSTHAN":
            return LESSTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "BETWEEN":
            return BETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "NOTBETWEEN":
            return NOTBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "GREATEREQUALS":
            return GREATEREQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "LESSEQUALS":
            return LESSEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "DAYTIMEBETWEEN":
            return DAYTIMEBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "BEGINSWITH":
            return BEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "NOTBEGINSWITH":
            return NOTBEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "ENDSWITH":
            return ENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "NOTENDSWITH":
            return NOTENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "CONTAINS":
            return CONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "NOTCONTAINS":
            return NOTCONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "ALLOF":
            return ALLOF_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "ONEOF":
            return ONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "NONEOF":
            return NONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "SETEQUALS":
            return SETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "ORDEREDSETEQUALS":
            return ORDEREDSETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "SUBSETOF":
            return SUBSETOF_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
        case "EXCLUDESALL":
            return EXCLUDESALL_DEVICECOMPLIANCESCRIPTRULOPERATOR, nil
    }
    return 0, errors.New("Unknown DeviceComplianceScriptRulOperator value: " + v)
}
func SerializeDeviceComplianceScriptRulOperator(values []DeviceComplianceScriptRulOperator) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
