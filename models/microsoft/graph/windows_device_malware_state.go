package graph

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55 "github.com/microsoft/kiota/abstractions/go/serialization"
)

// 
type WindowsDeviceMalwareState struct {
    Entity
    // Information URL to learn more about the malware
    additionalInformationUrl *string;
    // Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
    category *WindowsMalwareCategory;
    // Number of times the malware is detected
    detectionCount *int32;
    // Malware name
    displayName *string;
    // Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
    executionState *WindowsMalwareExecutionState;
    // Initial detection datetime of the malware
    initialDetectionDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time;
    // The last time this particular threat was changed
    lastStateChangeDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time;
    // Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
    severity *WindowsMalwareSeverity;
    // Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
    state *WindowsMalwareState;
    // Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
    threatState *WindowsMalwareThreatState;
}
// Instantiates a new windowsDeviceMalwareState and sets the default values.
func NewWindowsDeviceMalwareState()(*WindowsDeviceMalwareState) {
    m := &WindowsDeviceMalwareState{
        Entity: *NewEntity(),
    }
    return m
}
// Gets the additionalInformationUrl property value. Information URL to learn more about the malware
func (m *WindowsDeviceMalwareState) GetAdditionalInformationUrl()(*string) {
    if m == nil {
        return nil
    } else {
        return m.additionalInformationUrl
    }
}
// Gets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
func (m *WindowsDeviceMalwareState) GetCategory()(*WindowsMalwareCategory) {
    if m == nil {
        return nil
    } else {
        return m.category
    }
}
// Gets the detectionCount property value. Number of times the malware is detected
func (m *WindowsDeviceMalwareState) GetDetectionCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.detectionCount
    }
}
// Gets the displayName property value. Malware name
func (m *WindowsDeviceMalwareState) GetDisplayName()(*string) {
    if m == nil {
        return nil
    } else {
        return m.displayName
    }
}
// Gets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
func (m *WindowsDeviceMalwareState) GetExecutionState()(*WindowsMalwareExecutionState) {
    if m == nil {
        return nil
    } else {
        return m.executionState
    }
}
// Gets the initialDetectionDateTime property value. Initial detection datetime of the malware
func (m *WindowsDeviceMalwareState) GetInitialDetectionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.initialDetectionDateTime
    }
}
// Gets the lastStateChangeDateTime property value. The last time this particular threat was changed
func (m *WindowsDeviceMalwareState) GetLastStateChangeDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.lastStateChangeDateTime
    }
}
// Gets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
func (m *WindowsDeviceMalwareState) GetSeverity()(*WindowsMalwareSeverity) {
    if m == nil {
        return nil
    } else {
        return m.severity
    }
}
// Gets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
func (m *WindowsDeviceMalwareState) GetState()(*WindowsMalwareState) {
    if m == nil {
        return nil
    } else {
        return m.state
    }
}
// Gets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
func (m *WindowsDeviceMalwareState) GetThreatState()(*WindowsMalwareThreatState) {
    if m == nil {
        return nil
    } else {
        return m.threatState
    }
}
// The deserialization information for the current model
func (m *WindowsDeviceMalwareState) GetFieldDeserializers()(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["additionalInformationUrl"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAdditionalInformationUrl(val)
        }
        return nil
    }
    res["category"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareCategory)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsMalwareCategory)
            m.SetCategory(&cast)
        }
        return nil
    }
    res["detectionCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDetectionCount(val)
        }
        return nil
    }
    res["displayName"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDisplayName(val)
        }
        return nil
    }
    res["executionState"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareExecutionState)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsMalwareExecutionState)
            m.SetExecutionState(&cast)
        }
        return nil
    }
    res["initialDetectionDateTime"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetInitialDetectionDateTime(val)
        }
        return nil
    }
    res["lastStateChangeDateTime"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLastStateChangeDateTime(val)
        }
        return nil
    }
    res["severity"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareSeverity)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsMalwareSeverity)
            m.SetSeverity(&cast)
        }
        return nil
    }
    res["state"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareState)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsMalwareState)
            m.SetState(&cast)
        }
        return nil
    }
    res["threatState"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareThreatState)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsMalwareThreatState)
            m.SetThreatState(&cast)
        }
        return nil
    }
    return res
}
func (m *WindowsDeviceMalwareState) IsNil()(bool) {
    return m == nil
}
// Serializes information the current object
// Parameters:
//  - writer : Serialization writer to use to serialize this model
func (m *WindowsDeviceMalwareState) Serialize(writer i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("additionalInformationUrl", m.GetAdditionalInformationUrl())
        if err != nil {
            return err
        }
    }
    if m.GetCategory() != nil {
        cast := m.GetCategory().String()
        err = writer.WriteStringValue("category", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt32Value("detectionCount", m.GetDetectionCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("displayName", m.GetDisplayName())
        if err != nil {
            return err
        }
    }
    if m.GetExecutionState() != nil {
        cast := m.GetExecutionState().String()
        err = writer.WriteStringValue("executionState", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("initialDetectionDateTime", m.GetInitialDetectionDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("lastStateChangeDateTime", m.GetLastStateChangeDateTime())
        if err != nil {
            return err
        }
    }
    if m.GetSeverity() != nil {
        cast := m.GetSeverity().String()
        err = writer.WriteStringValue("severity", &cast)
        if err != nil {
            return err
        }
    }
    if m.GetState() != nil {
        cast := m.GetState().String()
        err = writer.WriteStringValue("state", &cast)
        if err != nil {
            return err
        }
    }
    if m.GetThreatState() != nil {
        cast := m.GetThreatState().String()
        err = writer.WriteStringValue("threatState", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// Sets the additionalInformationUrl property value. Information URL to learn more about the malware
// Parameters:
//  - value : Value to set for the additionalInformationUrl property.
func (m *WindowsDeviceMalwareState) SetAdditionalInformationUrl(value *string)() {
    m.additionalInformationUrl = value
}
// Sets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
// Parameters:
//  - value : Value to set for the category property.
func (m *WindowsDeviceMalwareState) SetCategory(value *WindowsMalwareCategory)() {
    m.category = value
}
// Sets the detectionCount property value. Number of times the malware is detected
// Parameters:
//  - value : Value to set for the detectionCount property.
func (m *WindowsDeviceMalwareState) SetDetectionCount(value *int32)() {
    m.detectionCount = value
}
// Sets the displayName property value. Malware name
// Parameters:
//  - value : Value to set for the displayName property.
func (m *WindowsDeviceMalwareState) SetDisplayName(value *string)() {
    m.displayName = value
}
// Sets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
// Parameters:
//  - value : Value to set for the executionState property.
func (m *WindowsDeviceMalwareState) SetExecutionState(value *WindowsMalwareExecutionState)() {
    m.executionState = value
}
// Sets the initialDetectionDateTime property value. Initial detection datetime of the malware
// Parameters:
//  - value : Value to set for the initialDetectionDateTime property.
func (m *WindowsDeviceMalwareState) SetInitialDetectionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.initialDetectionDateTime = value
}
// Sets the lastStateChangeDateTime property value. The last time this particular threat was changed
// Parameters:
//  - value : Value to set for the lastStateChangeDateTime property.
func (m *WindowsDeviceMalwareState) SetLastStateChangeDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.lastStateChangeDateTime = value
}
// Sets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
// Parameters:
//  - value : Value to set for the severity property.
func (m *WindowsDeviceMalwareState) SetSeverity(value *WindowsMalwareSeverity)() {
    m.severity = value
}
// Sets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
// Parameters:
//  - value : Value to set for the state property.
func (m *WindowsDeviceMalwareState) SetState(value *WindowsMalwareState)() {
    m.state = value
}
// Sets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
// Parameters:
//  - value : Value to set for the threatState property.
func (m *WindowsDeviceMalwareState) SetThreatState(value *WindowsMalwareThreatState)() {
    m.threatState = value
}
