package graph
import (
    "strings"
    "errors"
)
// 
type DeviceGuardVirtualizationBasedSecurityHardwareRequirementState int

const (
    MEETHARDWAREREQUIREMENTS_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE DeviceGuardVirtualizationBasedSecurityHardwareRequirementState = iota
    SECUREBOOTREQUIRED_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE
    DMAPROTECTIONREQUIRED_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE
    HYPERVNOTSUPPORTEDFORGUESTVM_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE
    HYPERVNOTAVAILABLE_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE
)

func (i DeviceGuardVirtualizationBasedSecurityHardwareRequirementState) String() string {
    return []string{"MEETHARDWAREREQUIREMENTS", "SECUREBOOTREQUIRED", "DMAPROTECTIONREQUIRED", "HYPERVNOTSUPPORTEDFORGUESTVM", "HYPERVNOTAVAILABLE"}[i]
}
func ParseDeviceGuardVirtualizationBasedSecurityHardwareRequirementState(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "MEETHARDWAREREQUIREMENTS":
            return MEETHARDWAREREQUIREMENTS_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE, nil
        case "SECUREBOOTREQUIRED":
            return SECUREBOOTREQUIRED_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE, nil
        case "DMAPROTECTIONREQUIRED":
            return DMAPROTECTIONREQUIRED_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE, nil
        case "HYPERVNOTSUPPORTEDFORGUESTVM":
            return HYPERVNOTSUPPORTEDFORGUESTVM_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE, nil
        case "HYPERVNOTAVAILABLE":
            return HYPERVNOTAVAILABLE_DEVICEGUARDVIRTUALIZATIONBASEDSECURITYHARDWAREREQUIREMENTSTATE, nil
    }
    return 0, errors.New("Unknown DeviceGuardVirtualizationBasedSecurityHardwareRequirementState value: " + v)
}
func SerializeDeviceGuardVirtualizationBasedSecurityHardwareRequirementState(values []DeviceGuardVirtualizationBasedSecurityHardwareRequirementState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
