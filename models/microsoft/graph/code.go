package graph
import (
    "strings"
    "errors"
)
type Code int

const (
    NONE_CODE Code = iota
    JSONFILEINVALID_CODE
    JSONFILEMISSING_CODE
    JSONFILETOOLARGE_CODE
    RULESMISSING_CODE
    DUPLICATERULES_CODE
    TOOMANYRULESSPECIFIED_CODE
    OPERATORMISSING_CODE
    OPERATORNOTSUPPORTED_CODE
    DATATYPEMISSING_CODE
    DATATYPENOTSUPPORTED_CODE
    OPERATORDATATYPECOMBINATIONNOTSUPPORTED_CODE
    MOREINFOURIMISSING_CODE
    MOREINFOURIINVALID_CODE
    MOREINFOURITOOLARGE_CODE
    DESCRIPTIONMISSING_CODE
    DESCRIPTIONINVALID_CODE
    DESCRIPTIONTOOLARGE_CODE
    TITLEMISSING_CODE
    TITLEINVALID_CODE
    TITLETOOLARGE_CODE
    OPERANDMISSING_CODE
    OPERANDINVALID_CODE
    OPERANDTOOLARGE_CODE
    SETTINGNAMEMISSING_CODE
    SETTINGNAMEINVALID_CODE
    SETTINGNAMETOOLARGE_CODE
    ENGLISHLOCALEMISSING_CODE
    DUPLICATELOCALES_CODE
    UNRECOGNIZEDLOCALE_CODE
    UNKNOWN_CODE
    REMEDIATIONSTRINGSMISSING_CODE
)

func (i Code) String() string {
    return []string{"NONE", "JSONFILEINVALID", "JSONFILEMISSING", "JSONFILETOOLARGE", "RULESMISSING", "DUPLICATERULES", "TOOMANYRULESSPECIFIED", "OPERATORMISSING", "OPERATORNOTSUPPORTED", "DATATYPEMISSING", "DATATYPENOTSUPPORTED", "OPERATORDATATYPECOMBINATIONNOTSUPPORTED", "MOREINFOURIMISSING", "MOREINFOURIINVALID", "MOREINFOURITOOLARGE", "DESCRIPTIONMISSING", "DESCRIPTIONINVALID", "DESCRIPTIONTOOLARGE", "TITLEMISSING", "TITLEINVALID", "TITLETOOLARGE", "OPERANDMISSING", "OPERANDINVALID", "OPERANDTOOLARGE", "SETTINGNAMEMISSING", "SETTINGNAMEINVALID", "SETTINGNAMETOOLARGE", "ENGLISHLOCALEMISSING", "DUPLICATELOCALES", "UNRECOGNIZEDLOCALE", "UNKNOWN", "REMEDIATIONSTRINGSMISSING"}[i]
}
func ParseCode(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "NONE":
            return NONE_CODE, nil
        case "JSONFILEINVALID":
            return JSONFILEINVALID_CODE, nil
        case "JSONFILEMISSING":
            return JSONFILEMISSING_CODE, nil
        case "JSONFILETOOLARGE":
            return JSONFILETOOLARGE_CODE, nil
        case "RULESMISSING":
            return RULESMISSING_CODE, nil
        case "DUPLICATERULES":
            return DUPLICATERULES_CODE, nil
        case "TOOMANYRULESSPECIFIED":
            return TOOMANYRULESSPECIFIED_CODE, nil
        case "OPERATORMISSING":
            return OPERATORMISSING_CODE, nil
        case "OPERATORNOTSUPPORTED":
            return OPERATORNOTSUPPORTED_CODE, nil
        case "DATATYPEMISSING":
            return DATATYPEMISSING_CODE, nil
        case "DATATYPENOTSUPPORTED":
            return DATATYPENOTSUPPORTED_CODE, nil
        case "OPERATORDATATYPECOMBINATIONNOTSUPPORTED":
            return OPERATORDATATYPECOMBINATIONNOTSUPPORTED_CODE, nil
        case "MOREINFOURIMISSING":
            return MOREINFOURIMISSING_CODE, nil
        case "MOREINFOURIINVALID":
            return MOREINFOURIINVALID_CODE, nil
        case "MOREINFOURITOOLARGE":
            return MOREINFOURITOOLARGE_CODE, nil
        case "DESCRIPTIONMISSING":
            return DESCRIPTIONMISSING_CODE, nil
        case "DESCRIPTIONINVALID":
            return DESCRIPTIONINVALID_CODE, nil
        case "DESCRIPTIONTOOLARGE":
            return DESCRIPTIONTOOLARGE_CODE, nil
        case "TITLEMISSING":
            return TITLEMISSING_CODE, nil
        case "TITLEINVALID":
            return TITLEINVALID_CODE, nil
        case "TITLETOOLARGE":
            return TITLETOOLARGE_CODE, nil
        case "OPERANDMISSING":
            return OPERANDMISSING_CODE, nil
        case "OPERANDINVALID":
            return OPERANDINVALID_CODE, nil
        case "OPERANDTOOLARGE":
            return OPERANDTOOLARGE_CODE, nil
        case "SETTINGNAMEMISSING":
            return SETTINGNAMEMISSING_CODE, nil
        case "SETTINGNAMEINVALID":
            return SETTINGNAMEINVALID_CODE, nil
        case "SETTINGNAMETOOLARGE":
            return SETTINGNAMETOOLARGE_CODE, nil
        case "ENGLISHLOCALEMISSING":
            return ENGLISHLOCALEMISSING_CODE, nil
        case "DUPLICATELOCALES":
            return DUPLICATELOCALES_CODE, nil
        case "UNRECOGNIZEDLOCALE":
            return UNRECOGNIZEDLOCALE_CODE, nil
        case "UNKNOWN":
            return UNKNOWN_CODE, nil
        case "REMEDIATIONSTRINGSMISSING":
            return REMEDIATIONSTRINGSMISSING_CODE, nil
    }
    return 0, errors.New("Unknown Code value: " + v)
}
func SerializeCode(values []Code) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
