package graph
import (
    "strings"
    "errors"
)
// 
type RemoteAction int

const (
    UNKNOWN_REMOTEACTION RemoteAction = iota
    FACTORYRESET_REMOTEACTION
    REMOVECOMPANYDATA_REMOTEACTION
    RESETPASSCODE_REMOTEACTION
    REMOTELOCK_REMOTEACTION
    ENABLELOSTMODE_REMOTEACTION
    DISABLELOSTMODE_REMOTEACTION
    LOCATEDEVICE_REMOTEACTION
    REBOOTNOW_REMOTEACTION
    RECOVERPASSCODE_REMOTEACTION
    CLEANWINDOWSDEVICE_REMOTEACTION
    LOGOUTSHAREDAPPLEDEVICEACTIVEUSER_REMOTEACTION
    QUICKSCAN_REMOTEACTION
    FULLSCAN_REMOTEACTION
    WINDOWSDEFENDERUPDATESIGNATURES_REMOTEACTION
    FACTORYRESETKEEPENROLLMENTDATA_REMOTEACTION
    UPDATEDEVICEACCOUNT_REMOTEACTION
    AUTOMATICREDEPLOYMENT_REMOTEACTION
    SHUTDOWN_REMOTEACTION
    ROTATEBITLOCKERKEYS_REMOTEACTION
    ROTATEFILEVAULTKEY_REMOTEACTION
    GETFILEVAULTKEY_REMOTEACTION
    SETDEVICENAME_REMOTEACTION
    ACTIVATEDEVICEESIM_REMOTEACTION
)

func (i RemoteAction) String() string {
    return []string{"UNKNOWN", "FACTORYRESET", "REMOVECOMPANYDATA", "RESETPASSCODE", "REMOTELOCK", "ENABLELOSTMODE", "DISABLELOSTMODE", "LOCATEDEVICE", "REBOOTNOW", "RECOVERPASSCODE", "CLEANWINDOWSDEVICE", "LOGOUTSHAREDAPPLEDEVICEACTIVEUSER", "QUICKSCAN", "FULLSCAN", "WINDOWSDEFENDERUPDATESIGNATURES", "FACTORYRESETKEEPENROLLMENTDATA", "UPDATEDEVICEACCOUNT", "AUTOMATICREDEPLOYMENT", "SHUTDOWN", "ROTATEBITLOCKERKEYS", "ROTATEFILEVAULTKEY", "GETFILEVAULTKEY", "SETDEVICENAME", "ACTIVATEDEVICEESIM"}[i]
}
func ParseRemoteAction(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            return UNKNOWN_REMOTEACTION, nil
        case "FACTORYRESET":
            return FACTORYRESET_REMOTEACTION, nil
        case "REMOVECOMPANYDATA":
            return REMOVECOMPANYDATA_REMOTEACTION, nil
        case "RESETPASSCODE":
            return RESETPASSCODE_REMOTEACTION, nil
        case "REMOTELOCK":
            return REMOTELOCK_REMOTEACTION, nil
        case "ENABLELOSTMODE":
            return ENABLELOSTMODE_REMOTEACTION, nil
        case "DISABLELOSTMODE":
            return DISABLELOSTMODE_REMOTEACTION, nil
        case "LOCATEDEVICE":
            return LOCATEDEVICE_REMOTEACTION, nil
        case "REBOOTNOW":
            return REBOOTNOW_REMOTEACTION, nil
        case "RECOVERPASSCODE":
            return RECOVERPASSCODE_REMOTEACTION, nil
        case "CLEANWINDOWSDEVICE":
            return CLEANWINDOWSDEVICE_REMOTEACTION, nil
        case "LOGOUTSHAREDAPPLEDEVICEACTIVEUSER":
            return LOGOUTSHAREDAPPLEDEVICEACTIVEUSER_REMOTEACTION, nil
        case "QUICKSCAN":
            return QUICKSCAN_REMOTEACTION, nil
        case "FULLSCAN":
            return FULLSCAN_REMOTEACTION, nil
        case "WINDOWSDEFENDERUPDATESIGNATURES":
            return WINDOWSDEFENDERUPDATESIGNATURES_REMOTEACTION, nil
        case "FACTORYRESETKEEPENROLLMENTDATA":
            return FACTORYRESETKEEPENROLLMENTDATA_REMOTEACTION, nil
        case "UPDATEDEVICEACCOUNT":
            return UPDATEDEVICEACCOUNT_REMOTEACTION, nil
        case "AUTOMATICREDEPLOYMENT":
            return AUTOMATICREDEPLOYMENT_REMOTEACTION, nil
        case "SHUTDOWN":
            return SHUTDOWN_REMOTEACTION, nil
        case "ROTATEBITLOCKERKEYS":
            return ROTATEBITLOCKERKEYS_REMOTEACTION, nil
        case "ROTATEFILEVAULTKEY":
            return ROTATEFILEVAULTKEY_REMOTEACTION, nil
        case "GETFILEVAULTKEY":
            return GETFILEVAULTKEY_REMOTEACTION, nil
        case "SETDEVICENAME":
            return SETDEVICENAME_REMOTEACTION, nil
        case "ACTIVATEDEVICEESIM":
            return ACTIVATEDEVICEESIM_REMOTEACTION, nil
    }
    return 0, errors.New("Unknown RemoteAction value: " + v)
}
func SerializeRemoteAction(values []RemoteAction) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
