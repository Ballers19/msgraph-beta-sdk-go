package graph
import (
    "strings"
    "errors"
)
// 
type DeviceManagementTemplateSubtype int

const (
    NONE_DEVICEMANAGEMENTTEMPLATESUBTYPE DeviceManagementTemplateSubtype = iota
    FIREWALL_DEVICEMANAGEMENTTEMPLATESUBTYPE
    DISKENCRYPTION_DEVICEMANAGEMENTTEMPLATESUBTYPE
    ATTACKSURFACEREDUCTION_DEVICEMANAGEMENTTEMPLATESUBTYPE
    ENDPOINTDETECTIONREPONSE_DEVICEMANAGEMENTTEMPLATESUBTYPE
    ACCOUNTPROTECTION_DEVICEMANAGEMENTTEMPLATESUBTYPE
    ANTIVIRUS_DEVICEMANAGEMENTTEMPLATESUBTYPE
    FIREWALLSHAREDAPPLIST_DEVICEMANAGEMENTTEMPLATESUBTYPE
    FIREWALLSHAREDIPLIST_DEVICEMANAGEMENTTEMPLATESUBTYPE
    FIREWALLSHAREDPORTLIST_DEVICEMANAGEMENTTEMPLATESUBTYPE
)

func (i DeviceManagementTemplateSubtype) String() string {
    return []string{"NONE", "FIREWALL", "DISKENCRYPTION", "ATTACKSURFACEREDUCTION", "ENDPOINTDETECTIONREPONSE", "ACCOUNTPROTECTION", "ANTIVIRUS", "FIREWALLSHAREDAPPLIST", "FIREWALLSHAREDIPLIST", "FIREWALLSHAREDPORTLIST"}[i]
}
func ParseDeviceManagementTemplateSubtype(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "NONE":
            return NONE_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "FIREWALL":
            return FIREWALL_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "DISKENCRYPTION":
            return DISKENCRYPTION_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "ATTACKSURFACEREDUCTION":
            return ATTACKSURFACEREDUCTION_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "ENDPOINTDETECTIONREPONSE":
            return ENDPOINTDETECTIONREPONSE_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "ACCOUNTPROTECTION":
            return ACCOUNTPROTECTION_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "ANTIVIRUS":
            return ANTIVIRUS_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "FIREWALLSHAREDAPPLIST":
            return FIREWALLSHAREDAPPLIST_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "FIREWALLSHAREDIPLIST":
            return FIREWALLSHAREDIPLIST_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
        case "FIREWALLSHAREDPORTLIST":
            return FIREWALLSHAREDPORTLIST_DEVICEMANAGEMENTTEMPLATESUBTYPE, nil
    }
    return 0, errors.New("Unknown DeviceManagementTemplateSubtype value: " + v)
}
func SerializeDeviceManagementTemplateSubtype(values []DeviceManagementTemplateSubtype) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
