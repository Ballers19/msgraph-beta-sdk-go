package graph
import (
    "strings"
    "errors"
)
type DeviceComplianceScriptRuleDataType int

const (
    NONE_DEVICECOMPLIANCESCRIPTRULEDATATYPE DeviceComplianceScriptRuleDataType = iota
    BOOLEAN_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    INT64_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DOUBLE_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    STRING_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DATETIME_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    VERSION_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    BASE64_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    XML_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    BOOLEANARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    INT64ARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DOUBLEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    STRINGARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DATETIMEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    VERSIONARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
)

func (i DeviceComplianceScriptRuleDataType) String() string {
    return []string{"NONE", "BOOLEAN", "INT64", "DOUBLE", "STRING", "DATETIME", "VERSION", "BASE64", "XML", "BOOLEANARRAY", "INT64ARRAY", "DOUBLEARRAY", "STRINGARRAY", "DATETIMEARRAY", "VERSIONARRAY"}[i]
}
func ParseDeviceComplianceScriptRuleDataType(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "NONE":
            return NONE_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "BOOLEAN":
            return BOOLEAN_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "INT64":
            return INT64_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "DOUBLE":
            return DOUBLE_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "STRING":
            return STRING_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "DATETIME":
            return DATETIME_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "VERSION":
            return VERSION_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "BASE64":
            return BASE64_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "XML":
            return XML_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "BOOLEANARRAY":
            return BOOLEANARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "INT64ARRAY":
            return INT64ARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "DOUBLEARRAY":
            return DOUBLEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "STRINGARRAY":
            return STRINGARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "DATETIMEARRAY":
            return DATETIMEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
        case "VERSIONARRAY":
            return VERSIONARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE, nil
    }
    return 0, errors.New("Unknown DeviceComplianceScriptRuleDataType value: " + v)
}
func SerializeDeviceComplianceScriptRuleDataType(values []DeviceComplianceScriptRuleDataType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
