package graph

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55 "github.com/microsoft/kiota/abstractions/go/serialization"
)

// 
type WindowsAutopilotDeploymentProfile struct {
    Entity
    // The list of assigned devices for the profile.
    assignedDevices []WindowsAutopilotDeviceIdentity;
    // The list of group assignments for the profile.
    assignments []WindowsAutopilotDeploymentProfileAssignment;
    // Profile creation time
    createdDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time;
    // Description of the profile
    description *string;
    // The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.
    deviceNameTemplate *string;
    // The AutoPilot device type that this profile is applicable to. Possible values are: windowsPc, surfaceHub2.
    deviceType *WindowsAutopilotDeviceType;
    // Name of the profile
    displayName *string;
    // Enable Autopilot White Glove for the profile.
    enableWhiteGlove *bool;
    // Enrollment status screen setting
    enrollmentStatusScreenSettings *WindowsEnrollmentStatusScreenSettings;
    // HardwareHash Extraction for the profile
    extractHardwareHash *bool;
    // Language configured on the device
    language *string;
    // Profile last modified time
    lastModifiedDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time;
    // AzureAD management app ID used during client device-based enrollment discovery
    managementServiceAppId *string;
    // Out of box experience setting
    outOfBoxExperienceSettings *OutOfBoxExperienceSettings;
    // Scope tags for the profile.
    roleScopeTagIds []string;
}
// Instantiates a new windowsAutopilotDeploymentProfile and sets the default values.
func NewWindowsAutopilotDeploymentProfile()(*WindowsAutopilotDeploymentProfile) {
    m := &WindowsAutopilotDeploymentProfile{
        Entity: *NewEntity(),
    }
    return m
}
// Gets the assignedDevices property value. The list of assigned devices for the profile.
func (m *WindowsAutopilotDeploymentProfile) GetAssignedDevices()([]WindowsAutopilotDeviceIdentity) {
    if m == nil {
        return nil
    } else {
        return m.assignedDevices
    }
}
// Gets the assignments property value. The list of group assignments for the profile.
func (m *WindowsAutopilotDeploymentProfile) GetAssignments()([]WindowsAutopilotDeploymentProfileAssignment) {
    if m == nil {
        return nil
    } else {
        return m.assignments
    }
}
// Gets the createdDateTime property value. Profile creation time
func (m *WindowsAutopilotDeploymentProfile) GetCreatedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.createdDateTime
    }
}
// Gets the description property value. Description of the profile
func (m *WindowsAutopilotDeploymentProfile) GetDescription()(*string) {
    if m == nil {
        return nil
    } else {
        return m.description
    }
}
// Gets the deviceNameTemplate property value. The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.
func (m *WindowsAutopilotDeploymentProfile) GetDeviceNameTemplate()(*string) {
    if m == nil {
        return nil
    } else {
        return m.deviceNameTemplate
    }
}
// Gets the deviceType property value. The AutoPilot device type that this profile is applicable to. Possible values are: windowsPc, surfaceHub2.
func (m *WindowsAutopilotDeploymentProfile) GetDeviceType()(*WindowsAutopilotDeviceType) {
    if m == nil {
        return nil
    } else {
        return m.deviceType
    }
}
// Gets the displayName property value. Name of the profile
func (m *WindowsAutopilotDeploymentProfile) GetDisplayName()(*string) {
    if m == nil {
        return nil
    } else {
        return m.displayName
    }
}
// Gets the enableWhiteGlove property value. Enable Autopilot White Glove for the profile.
func (m *WindowsAutopilotDeploymentProfile) GetEnableWhiteGlove()(*bool) {
    if m == nil {
        return nil
    } else {
        return m.enableWhiteGlove
    }
}
// Gets the enrollmentStatusScreenSettings property value. Enrollment status screen setting
func (m *WindowsAutopilotDeploymentProfile) GetEnrollmentStatusScreenSettings()(*WindowsEnrollmentStatusScreenSettings) {
    if m == nil {
        return nil
    } else {
        return m.enrollmentStatusScreenSettings
    }
}
// Gets the extractHardwareHash property value. HardwareHash Extraction for the profile
func (m *WindowsAutopilotDeploymentProfile) GetExtractHardwareHash()(*bool) {
    if m == nil {
        return nil
    } else {
        return m.extractHardwareHash
    }
}
// Gets the language property value. Language configured on the device
func (m *WindowsAutopilotDeploymentProfile) GetLanguage()(*string) {
    if m == nil {
        return nil
    } else {
        return m.language
    }
}
// Gets the lastModifiedDateTime property value. Profile last modified time
func (m *WindowsAutopilotDeploymentProfile) GetLastModifiedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.lastModifiedDateTime
    }
}
// Gets the managementServiceAppId property value. AzureAD management app ID used during client device-based enrollment discovery
func (m *WindowsAutopilotDeploymentProfile) GetManagementServiceAppId()(*string) {
    if m == nil {
        return nil
    } else {
        return m.managementServiceAppId
    }
}
// Gets the outOfBoxExperienceSettings property value. Out of box experience setting
func (m *WindowsAutopilotDeploymentProfile) GetOutOfBoxExperienceSettings()(*OutOfBoxExperienceSettings) {
    if m == nil {
        return nil
    } else {
        return m.outOfBoxExperienceSettings
    }
}
// Gets the roleScopeTagIds property value. Scope tags for the profile.
func (m *WindowsAutopilotDeploymentProfile) GetRoleScopeTagIds()([]string) {
    if m == nil {
        return nil
    } else {
        return m.roleScopeTagIds
    }
}
// The deserialization information for the current model
func (m *WindowsAutopilotDeploymentProfile) GetFieldDeserializers()(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["assignedDevices"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsAutopilotDeviceIdentity() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WindowsAutopilotDeviceIdentity, len(val))
            for i, v := range val {
                res[i] = *(v.(*WindowsAutopilotDeviceIdentity))
            }
            m.SetAssignedDevices(res)
        }
        return nil
    }
    res["assignments"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsAutopilotDeploymentProfileAssignment() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WindowsAutopilotDeploymentProfileAssignment, len(val))
            for i, v := range val {
                res[i] = *(v.(*WindowsAutopilotDeploymentProfileAssignment))
            }
            m.SetAssignments(res)
        }
        return nil
    }
    res["createdDateTime"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCreatedDateTime(val)
        }
        return nil
    }
    res["description"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDescription(val)
        }
        return nil
    }
    res["deviceNameTemplate"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDeviceNameTemplate(val)
        }
        return nil
    }
    res["deviceType"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsAutopilotDeviceType)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsAutopilotDeviceType)
            m.SetDeviceType(&cast)
        }
        return nil
    }
    res["displayName"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDisplayName(val)
        }
        return nil
    }
    res["enableWhiteGlove"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetEnableWhiteGlove(val)
        }
        return nil
    }
    res["enrollmentStatusScreenSettings"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetObjectValue(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsEnrollmentStatusScreenSettings() })
        if err != nil {
            return err
        }
        if val != nil {
            m.SetEnrollmentStatusScreenSettings(val.(*WindowsEnrollmentStatusScreenSettings))
        }
        return nil
    }
    res["extractHardwareHash"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetExtractHardwareHash(val)
        }
        return nil
    }
    res["language"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLanguage(val)
        }
        return nil
    }
    res["lastModifiedDateTime"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLastModifiedDateTime(val)
        }
        return nil
    }
    res["managementServiceAppId"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetManagementServiceAppId(val)
        }
        return nil
    }
    res["outOfBoxExperienceSettings"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetObjectValue(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewOutOfBoxExperienceSettings() })
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOutOfBoxExperienceSettings(val.(*OutOfBoxExperienceSettings))
        }
        return nil
    }
    res["roleScopeTagIds"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                res[i] = *(v.(*string))
            }
            m.SetRoleScopeTagIds(res)
        }
        return nil
    }
    return res
}
func (m *WindowsAutopilotDeploymentProfile) IsNil()(bool) {
    return m == nil
}
// Serializes information the current object
// Parameters:
//  - writer : Serialization writer to use to serialize this model
func (m *WindowsAutopilotDeploymentProfile) Serialize(writer i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetAssignedDevices()))
        for i, v := range m.GetAssignedDevices() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err = writer.WriteCollectionOfObjectValues("assignedDevices", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetAssignments()))
        for i, v := range m.GetAssignments() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err = writer.WriteCollectionOfObjectValues("assignments", cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("createdDateTime", m.GetCreatedDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("description", m.GetDescription())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("deviceNameTemplate", m.GetDeviceNameTemplate())
        if err != nil {
            return err
        }
    }
    if m.GetDeviceType() != nil {
        cast := m.GetDeviceType().String()
        err = writer.WriteStringValue("deviceType", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("displayName", m.GetDisplayName())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteBoolValue("enableWhiteGlove", m.GetEnableWhiteGlove())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("enrollmentStatusScreenSettings", m.GetEnrollmentStatusScreenSettings())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteBoolValue("extractHardwareHash", m.GetExtractHardwareHash())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("language", m.GetLanguage())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("lastModifiedDateTime", m.GetLastModifiedDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("managementServiceAppId", m.GetManagementServiceAppId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("outOfBoxExperienceSettings", m.GetOutOfBoxExperienceSettings())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteCollectionOfStringValues("roleScopeTagIds", m.GetRoleScopeTagIds())
        if err != nil {
            return err
        }
    }
    return nil
}
// Sets the assignedDevices property value. The list of assigned devices for the profile.
// Parameters:
//  - value : Value to set for the assignedDevices property.
func (m *WindowsAutopilotDeploymentProfile) SetAssignedDevices(value []WindowsAutopilotDeviceIdentity)() {
    m.assignedDevices = value
}
// Sets the assignments property value. The list of group assignments for the profile.
// Parameters:
//  - value : Value to set for the assignments property.
func (m *WindowsAutopilotDeploymentProfile) SetAssignments(value []WindowsAutopilotDeploymentProfileAssignment)() {
    m.assignments = value
}
// Sets the createdDateTime property value. Profile creation time
// Parameters:
//  - value : Value to set for the createdDateTime property.
func (m *WindowsAutopilotDeploymentProfile) SetCreatedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.createdDateTime = value
}
// Sets the description property value. Description of the profile
// Parameters:
//  - value : Value to set for the description property.
func (m *WindowsAutopilotDeploymentProfile) SetDescription(value *string)() {
    m.description = value
}
// Sets the deviceNameTemplate property value. The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.
// Parameters:
//  - value : Value to set for the deviceNameTemplate property.
func (m *WindowsAutopilotDeploymentProfile) SetDeviceNameTemplate(value *string)() {
    m.deviceNameTemplate = value
}
// Sets the deviceType property value. The AutoPilot device type that this profile is applicable to. Possible values are: windowsPc, surfaceHub2.
// Parameters:
//  - value : Value to set for the deviceType property.
func (m *WindowsAutopilotDeploymentProfile) SetDeviceType(value *WindowsAutopilotDeviceType)() {
    m.deviceType = value
}
// Sets the displayName property value. Name of the profile
// Parameters:
//  - value : Value to set for the displayName property.
func (m *WindowsAutopilotDeploymentProfile) SetDisplayName(value *string)() {
    m.displayName = value
}
// Sets the enableWhiteGlove property value. Enable Autopilot White Glove for the profile.
// Parameters:
//  - value : Value to set for the enableWhiteGlove property.
func (m *WindowsAutopilotDeploymentProfile) SetEnableWhiteGlove(value *bool)() {
    m.enableWhiteGlove = value
}
// Sets the enrollmentStatusScreenSettings property value. Enrollment status screen setting
// Parameters:
//  - value : Value to set for the enrollmentStatusScreenSettings property.
func (m *WindowsAutopilotDeploymentProfile) SetEnrollmentStatusScreenSettings(value *WindowsEnrollmentStatusScreenSettings)() {
    m.enrollmentStatusScreenSettings = value
}
// Sets the extractHardwareHash property value. HardwareHash Extraction for the profile
// Parameters:
//  - value : Value to set for the extractHardwareHash property.
func (m *WindowsAutopilotDeploymentProfile) SetExtractHardwareHash(value *bool)() {
    m.extractHardwareHash = value
}
// Sets the language property value. Language configured on the device
// Parameters:
//  - value : Value to set for the language property.
func (m *WindowsAutopilotDeploymentProfile) SetLanguage(value *string)() {
    m.language = value
}
// Sets the lastModifiedDateTime property value. Profile last modified time
// Parameters:
//  - value : Value to set for the lastModifiedDateTime property.
func (m *WindowsAutopilotDeploymentProfile) SetLastModifiedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.lastModifiedDateTime = value
}
// Sets the managementServiceAppId property value. AzureAD management app ID used during client device-based enrollment discovery
// Parameters:
//  - value : Value to set for the managementServiceAppId property.
func (m *WindowsAutopilotDeploymentProfile) SetManagementServiceAppId(value *string)() {
    m.managementServiceAppId = value
}
// Sets the outOfBoxExperienceSettings property value. Out of box experience setting
// Parameters:
//  - value : Value to set for the outOfBoxExperienceSettings property.
func (m *WindowsAutopilotDeploymentProfile) SetOutOfBoxExperienceSettings(value *OutOfBoxExperienceSettings)() {
    m.outOfBoxExperienceSettings = value
}
// Sets the roleScopeTagIds property value. Scope tags for the profile.
// Parameters:
//  - value : Value to set for the roleScopeTagIds property.
func (m *WindowsAutopilotDeploymentProfile) SetRoleScopeTagIds(value []string)() {
    m.roleScopeTagIds = value
}
