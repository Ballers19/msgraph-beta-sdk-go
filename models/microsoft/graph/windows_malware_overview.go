package graph

import (
    i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55 "github.com/microsoft/kiota/abstractions/go/serialization"
)

type WindowsMalwareOverview struct {
    additionalData map[string]interface{};
    malwareCategorySummary []WindowsMalwareCategoryCount;
    malwareDetectedDeviceCount *int32;
    malwareExecutionStateSummary []WindowsMalwareExecutionStateCount;
    malwareNameSummary []WindowsMalwareNameCount;
    malwareSeveritySummary []WindowsMalwareSeverityCount;
    malwareStateSummary []WindowsMalwareStateCount;
    osVersionsSummary []OsVersionCount;
    totalDistinctMalwareCount *int32;
    totalMalwareCount *int32;
}
func NewWindowsMalwareOverview()(*WindowsMalwareOverview) {
    m := &WindowsMalwareOverview{
    }
    m.SetAdditionalData(make(map[string]interface{}));
    return m
}
func (m *WindowsMalwareOverview) GetAdditionalData()(map[string]interface{}) {
    if m == nil {
        return nil
    } else {
        return m.additionalData
    }
}
func (m *WindowsMalwareOverview) GetMalwareCategorySummary()([]WindowsMalwareCategoryCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareCategorySummary
    }
}
func (m *WindowsMalwareOverview) GetMalwareDetectedDeviceCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.malwareDetectedDeviceCount
    }
}
func (m *WindowsMalwareOverview) GetMalwareExecutionStateSummary()([]WindowsMalwareExecutionStateCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareExecutionStateSummary
    }
}
func (m *WindowsMalwareOverview) GetMalwareNameSummary()([]WindowsMalwareNameCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareNameSummary
    }
}
func (m *WindowsMalwareOverview) GetMalwareSeveritySummary()([]WindowsMalwareSeverityCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareSeveritySummary
    }
}
func (m *WindowsMalwareOverview) GetMalwareStateSummary()([]WindowsMalwareStateCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareStateSummary
    }
}
func (m *WindowsMalwareOverview) GetOsVersionsSummary()([]OsVersionCount) {
    if m == nil {
        return nil
    } else {
        return m.osVersionsSummary
    }
}
func (m *WindowsMalwareOverview) GetTotalDistinctMalwareCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.totalDistinctMalwareCount
    }
}
func (m *WindowsMalwareOverview) GetTotalMalwareCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.totalMalwareCount
    }
}
func (m *WindowsMalwareOverview) GetFieldDeserializers()(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error)) {
    res := make(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error))
    res["malwareCategorySummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareCategoryCount() })
        if err != nil {
            return err
        }
        res := make([]WindowsMalwareCategoryCount, len(val))
        for i, v := range val {
            res[i] = *(v.(*WindowsMalwareCategoryCount))
        }
        m.SetMalwareCategorySummary(res)
        return nil
    }
    res["malwareDetectedDeviceCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        m.SetMalwareDetectedDeviceCount(val)
        return nil
    }
    res["malwareExecutionStateSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareExecutionStateCount() })
        if err != nil {
            return err
        }
        res := make([]WindowsMalwareExecutionStateCount, len(val))
        for i, v := range val {
            res[i] = *(v.(*WindowsMalwareExecutionStateCount))
        }
        m.SetMalwareExecutionStateSummary(res)
        return nil
    }
    res["malwareNameSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareNameCount() })
        if err != nil {
            return err
        }
        res := make([]WindowsMalwareNameCount, len(val))
        for i, v := range val {
            res[i] = *(v.(*WindowsMalwareNameCount))
        }
        m.SetMalwareNameSummary(res)
        return nil
    }
    res["malwareSeveritySummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareSeverityCount() })
        if err != nil {
            return err
        }
        res := make([]WindowsMalwareSeverityCount, len(val))
        for i, v := range val {
            res[i] = *(v.(*WindowsMalwareSeverityCount))
        }
        m.SetMalwareSeveritySummary(res)
        return nil
    }
    res["malwareStateSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareStateCount() })
        if err != nil {
            return err
        }
        res := make([]WindowsMalwareStateCount, len(val))
        for i, v := range val {
            res[i] = *(v.(*WindowsMalwareStateCount))
        }
        m.SetMalwareStateSummary(res)
        return nil
    }
    res["osVersionsSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewOsVersionCount() })
        if err != nil {
            return err
        }
        res := make([]OsVersionCount, len(val))
        for i, v := range val {
            res[i] = *(v.(*OsVersionCount))
        }
        m.SetOsVersionsSummary(res)
        return nil
    }
    res["totalDistinctMalwareCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        m.SetTotalDistinctMalwareCount(val)
        return nil
    }
    res["totalMalwareCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        m.SetTotalMalwareCount(val)
        return nil
    }
    return res
}
func (m *WindowsMalwareOverview) IsNil()(bool) {
    return m == nil
}
func (m *WindowsMalwareOverview) Serialize(writer i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.SerializationWriter)(error) {
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareCategorySummary()))
        for i, v := range m.GetMalwareCategorySummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareCategorySummary", cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteInt32Value("malwareDetectedDeviceCount", m.GetMalwareDetectedDeviceCount())
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareExecutionStateSummary()))
        for i, v := range m.GetMalwareExecutionStateSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareExecutionStateSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareNameSummary()))
        for i, v := range m.GetMalwareNameSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareNameSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareSeveritySummary()))
        for i, v := range m.GetMalwareSeveritySummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareSeveritySummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareStateSummary()))
        for i, v := range m.GetMalwareStateSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareStateSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetOsVersionsSummary()))
        for i, v := range m.GetOsVersionsSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("osVersionsSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteInt32Value("totalDistinctMalwareCount", m.GetTotalDistinctMalwareCount())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteInt32Value("totalMalwareCount", m.GetTotalMalwareCount())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
func (m *WindowsMalwareOverview) SetAdditionalData(value map[string]interface{})() {
    m.additionalData = value
}
func (m *WindowsMalwareOverview) SetMalwareCategorySummary(value []WindowsMalwareCategoryCount)() {
    m.malwareCategorySummary = value
}
func (m *WindowsMalwareOverview) SetMalwareDetectedDeviceCount(value *int32)() {
    m.malwareDetectedDeviceCount = value
}
func (m *WindowsMalwareOverview) SetMalwareExecutionStateSummary(value []WindowsMalwareExecutionStateCount)() {
    m.malwareExecutionStateSummary = value
}
func (m *WindowsMalwareOverview) SetMalwareNameSummary(value []WindowsMalwareNameCount)() {
    m.malwareNameSummary = value
}
func (m *WindowsMalwareOverview) SetMalwareSeveritySummary(value []WindowsMalwareSeverityCount)() {
    m.malwareSeveritySummary = value
}
func (m *WindowsMalwareOverview) SetMalwareStateSummary(value []WindowsMalwareStateCount)() {
    m.malwareStateSummary = value
}
func (m *WindowsMalwareOverview) SetOsVersionsSummary(value []OsVersionCount)() {
    m.osVersionsSummary = value
}
func (m *WindowsMalwareOverview) SetTotalDistinctMalwareCount(value *int32)() {
    m.totalDistinctMalwareCount = value
}
func (m *WindowsMalwareOverview) SetTotalMalwareCount(value *int32)() {
    m.totalMalwareCount = value
}
