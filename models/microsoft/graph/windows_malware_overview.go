package graph

import (
    i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55 "github.com/microsoft/kiota/abstractions/go/serialization"
)

// 
type WindowsMalwareOverview struct {
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]interface{};
    // Count of devices per malware category
    malwareCategorySummary []WindowsMalwareCategoryCount;
    // Count of devices with malware detected in the last 30 days
    malwareDetectedDeviceCount *int32;
    // Count of devices per malware execution state
    malwareExecutionStateSummary []WindowsMalwareExecutionStateCount;
    // Count of devices per malware
    malwareNameSummary []WindowsMalwareNameCount;
    // Count of active malware per malware severity
    malwareSeveritySummary []WindowsMalwareSeverityCount;
    // Count of devices per malware state
    malwareStateSummary []WindowsMalwareStateCount;
    // Count of devices with malware per windows OS version
    osVersionsSummary []OsVersionCount;
    // Count of all distinct malwares detected across all devices. Valid values -2147483648 to 2147483647
    totalDistinctMalwareCount *int32;
    // Count of all malware detections across all devices. Valid values -2147483648 to 2147483647
    totalMalwareCount *int32;
}
// Instantiates a new windowsMalwareOverview and sets the default values.
func NewWindowsMalwareOverview()(*WindowsMalwareOverview) {
    m := &WindowsMalwareOverview{
    }
    m.SetAdditionalData(make(map[string]interface{}));
    return m
}
// Gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *WindowsMalwareOverview) GetAdditionalData()(map[string]interface{}) {
    if m == nil {
        return nil
    } else {
        return m.additionalData
    }
}
// Gets the malwareCategorySummary property value. Count of devices per malware category
func (m *WindowsMalwareOverview) GetMalwareCategorySummary()([]WindowsMalwareCategoryCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareCategorySummary
    }
}
// Gets the malwareDetectedDeviceCount property value. Count of devices with malware detected in the last 30 days
func (m *WindowsMalwareOverview) GetMalwareDetectedDeviceCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.malwareDetectedDeviceCount
    }
}
// Gets the malwareExecutionStateSummary property value. Count of devices per malware execution state
func (m *WindowsMalwareOverview) GetMalwareExecutionStateSummary()([]WindowsMalwareExecutionStateCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareExecutionStateSummary
    }
}
// Gets the malwareNameSummary property value. Count of devices per malware
func (m *WindowsMalwareOverview) GetMalwareNameSummary()([]WindowsMalwareNameCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareNameSummary
    }
}
// Gets the malwareSeveritySummary property value. Count of active malware per malware severity
func (m *WindowsMalwareOverview) GetMalwareSeveritySummary()([]WindowsMalwareSeverityCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareSeveritySummary
    }
}
// Gets the malwareStateSummary property value. Count of devices per malware state
func (m *WindowsMalwareOverview) GetMalwareStateSummary()([]WindowsMalwareStateCount) {
    if m == nil {
        return nil
    } else {
        return m.malwareStateSummary
    }
}
// Gets the osVersionsSummary property value. Count of devices with malware per windows OS version
func (m *WindowsMalwareOverview) GetOsVersionsSummary()([]OsVersionCount) {
    if m == nil {
        return nil
    } else {
        return m.osVersionsSummary
    }
}
// Gets the totalDistinctMalwareCount property value. Count of all distinct malwares detected across all devices. Valid values -2147483648 to 2147483647
func (m *WindowsMalwareOverview) GetTotalDistinctMalwareCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.totalDistinctMalwareCount
    }
}
// Gets the totalMalwareCount property value. Count of all malware detections across all devices. Valid values -2147483648 to 2147483647
func (m *WindowsMalwareOverview) GetTotalMalwareCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.totalMalwareCount
    }
}
// The deserialization information for the current model
func (m *WindowsMalwareOverview) GetFieldDeserializers()(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error)) {
    res := make(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error))
    res["malwareCategorySummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareCategoryCount() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WindowsMalwareCategoryCount, len(val))
            for i, v := range val {
                res[i] = *(v.(*WindowsMalwareCategoryCount))
            }
            m.SetMalwareCategorySummary(res)
        }
        return nil
    }
    res["malwareDetectedDeviceCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMalwareDetectedDeviceCount(val)
        }
        return nil
    }
    res["malwareExecutionStateSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareExecutionStateCount() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WindowsMalwareExecutionStateCount, len(val))
            for i, v := range val {
                res[i] = *(v.(*WindowsMalwareExecutionStateCount))
            }
            m.SetMalwareExecutionStateSummary(res)
        }
        return nil
    }
    res["malwareNameSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareNameCount() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WindowsMalwareNameCount, len(val))
            for i, v := range val {
                res[i] = *(v.(*WindowsMalwareNameCount))
            }
            m.SetMalwareNameSummary(res)
        }
        return nil
    }
    res["malwareSeveritySummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareSeverityCount() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WindowsMalwareSeverityCount, len(val))
            for i, v := range val {
                res[i] = *(v.(*WindowsMalwareSeverityCount))
            }
            m.SetMalwareSeveritySummary(res)
        }
        return nil
    }
    res["malwareStateSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewWindowsMalwareStateCount() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WindowsMalwareStateCount, len(val))
            for i, v := range val {
                res[i] = *(v.(*WindowsMalwareStateCount))
            }
            m.SetMalwareStateSummary(res)
        }
        return nil
    }
    res["osVersionsSummary"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(func () i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable { return NewOsVersionCount() })
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]OsVersionCount, len(val))
            for i, v := range val {
                res[i] = *(v.(*OsVersionCount))
            }
            m.SetOsVersionsSummary(res)
        }
        return nil
    }
    res["totalDistinctMalwareCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTotalDistinctMalwareCount(val)
        }
        return nil
    }
    res["totalMalwareCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTotalMalwareCount(val)
        }
        return nil
    }
    return res
}
func (m *WindowsMalwareOverview) IsNil()(bool) {
    return m == nil
}
// Serializes information the current object
// Parameters:
//  - writer : Serialization writer to use to serialize this model
func (m *WindowsMalwareOverview) Serialize(writer i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.SerializationWriter)(error) {
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareCategorySummary()))
        for i, v := range m.GetMalwareCategorySummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareCategorySummary", cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteInt32Value("malwareDetectedDeviceCount", m.GetMalwareDetectedDeviceCount())
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareExecutionStateSummary()))
        for i, v := range m.GetMalwareExecutionStateSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareExecutionStateSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareNameSummary()))
        for i, v := range m.GetMalwareNameSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareNameSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareSeveritySummary()))
        for i, v := range m.GetMalwareSeveritySummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareSeveritySummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetMalwareStateSummary()))
        for i, v := range m.GetMalwareStateSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("malwareStateSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        cast := make([]i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable, len(m.GetOsVersionsSummary()))
        for i, v := range m.GetOsVersionsSummary() {
            temp := v
            cast[i] = i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.Parsable(&temp)
        }
        err := writer.WriteCollectionOfObjectValues("osVersionsSummary", cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteInt32Value("totalDistinctMalwareCount", m.GetTotalDistinctMalwareCount())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteInt32Value("totalMalwareCount", m.GetTotalMalwareCount())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// Sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// Parameters:
//  - value : Value to set for the AdditionalData property.
func (m *WindowsMalwareOverview) SetAdditionalData(value map[string]interface{})() {
    m.additionalData = value
}
// Sets the malwareCategorySummary property value. Count of devices per malware category
// Parameters:
//  - value : Value to set for the malwareCategorySummary property.
func (m *WindowsMalwareOverview) SetMalwareCategorySummary(value []WindowsMalwareCategoryCount)() {
    m.malwareCategorySummary = value
}
// Sets the malwareDetectedDeviceCount property value. Count of devices with malware detected in the last 30 days
// Parameters:
//  - value : Value to set for the malwareDetectedDeviceCount property.
func (m *WindowsMalwareOverview) SetMalwareDetectedDeviceCount(value *int32)() {
    m.malwareDetectedDeviceCount = value
}
// Sets the malwareExecutionStateSummary property value. Count of devices per malware execution state
// Parameters:
//  - value : Value to set for the malwareExecutionStateSummary property.
func (m *WindowsMalwareOverview) SetMalwareExecutionStateSummary(value []WindowsMalwareExecutionStateCount)() {
    m.malwareExecutionStateSummary = value
}
// Sets the malwareNameSummary property value. Count of devices per malware
// Parameters:
//  - value : Value to set for the malwareNameSummary property.
func (m *WindowsMalwareOverview) SetMalwareNameSummary(value []WindowsMalwareNameCount)() {
    m.malwareNameSummary = value
}
// Sets the malwareSeveritySummary property value. Count of active malware per malware severity
// Parameters:
//  - value : Value to set for the malwareSeveritySummary property.
func (m *WindowsMalwareOverview) SetMalwareSeveritySummary(value []WindowsMalwareSeverityCount)() {
    m.malwareSeveritySummary = value
}
// Sets the malwareStateSummary property value. Count of devices per malware state
// Parameters:
//  - value : Value to set for the malwareStateSummary property.
func (m *WindowsMalwareOverview) SetMalwareStateSummary(value []WindowsMalwareStateCount)() {
    m.malwareStateSummary = value
}
// Sets the osVersionsSummary property value. Count of devices with malware per windows OS version
// Parameters:
//  - value : Value to set for the osVersionsSummary property.
func (m *WindowsMalwareOverview) SetOsVersionsSummary(value []OsVersionCount)() {
    m.osVersionsSummary = value
}
// Sets the totalDistinctMalwareCount property value. Count of all distinct malwares detected across all devices. Valid values -2147483648 to 2147483647
// Parameters:
//  - value : Value to set for the totalDistinctMalwareCount property.
func (m *WindowsMalwareOverview) SetTotalDistinctMalwareCount(value *int32)() {
    m.totalDistinctMalwareCount = value
}
// Sets the totalMalwareCount property value. Count of all malware detections across all devices. Valid values -2147483648 to 2147483647
// Parameters:
//  - value : Value to set for the totalMalwareCount property.
func (m *WindowsMalwareOverview) SetTotalMalwareCount(value *int32)() {
    m.totalMalwareCount = value
}
