package graph
import (
    "strings"
    "errors"
)
// 
type SynchronizationSecret int

const (
    NONE_SYNCHRONIZATIONSECRET SynchronizationSecret = iota
    USERNAME_SYNCHRONIZATIONSECRET
    PASSWORD_SYNCHRONIZATIONSECRET
    SECRETTOKEN_SYNCHRONIZATIONSECRET
    APPKEY_SYNCHRONIZATIONSECRET
    BASEADDRESS_SYNCHRONIZATIONSECRET
    CLIENTIDENTIFIER_SYNCHRONIZATIONSECRET
    CLIENTSECRET_SYNCHRONIZATIONSECRET
    SINGLESIGNONTYPE_SYNCHRONIZATIONSECRET
    SANDBOX_SYNCHRONIZATIONSECRET
    URL_SYNCHRONIZATIONSECRET
    DOMAIN_SYNCHRONIZATIONSECRET
    CONSUMERKEY_SYNCHRONIZATIONSECRET
    CONSUMERSECRET_SYNCHRONIZATIONSECRET
    TOKENKEY_SYNCHRONIZATIONSECRET
    TOKENEXPIRATION_SYNCHRONIZATIONSECRET
    OAUTH2ACCESSTOKEN_SYNCHRONIZATIONSECRET
    OAUTH2ACCESSTOKENCREATIONTIME_SYNCHRONIZATIONSECRET
    OAUTH2REFRESHTOKEN_SYNCHRONIZATIONSECRET
    SYNCALL_SYNCHRONIZATIONSECRET
    INSTANCENAME_SYNCHRONIZATIONSECRET
    OAUTH2CLIENTID_SYNCHRONIZATIONSECRET
    OAUTH2CLIENTSECRET_SYNCHRONIZATIONSECRET
    COMPANYID_SYNCHRONIZATIONSECRET
    UPDATEKEYONSOFTDELETE_SYNCHRONIZATIONSECRET
    SYNCHRONIZATIONSCHEDULE_SYNCHRONIZATIONSECRET
    SYSTEMOFRECORD_SYNCHRONIZATIONSECRET
    SANDBOXNAME_SYNCHRONIZATIONSECRET
    ENFORCEDOMAIN_SYNCHRONIZATIONSECRET
    SYNCNOTIFICATIONSETTINGS_SYNCHRONIZATIONSECRET
    SKIPOUTOFSCOPEDELETIONS_SYNCHRONIZATIONSECRET
    OAUTH2AUTHORIZATIONCODE_SYNCHRONIZATIONSECRET
    OAUTH2REDIRECTURI_SYNCHRONIZATIONSECRET
    APPLICATIONTEMPLATEIDENTIFIER_SYNCHRONIZATIONSECRET
    OAUTH2TOKENEXCHANGEURI_SYNCHRONIZATIONSECRET
    OAUTH2AUTHORIZATIONURI_SYNCHRONIZATIONSECRET
    AUTHENTICATIONTYPE_SYNCHRONIZATIONSECRET
    SERVER_SYNCHRONIZATIONSECRET
    PERFORMINBOUNDENTITLEMENTGRANTS_SYNCHRONIZATIONSECRET
    HARDDELETESENABLED_SYNCHRONIZATIONSECRET
    SYNCAGENTCOMPATIBILITYKEY_SYNCHRONIZATIONSECRET
    SYNCAGENTADCONTAINER_SYNCHRONIZATIONSECRET
    VALIDATEDOMAIN_SYNCHRONIZATIONSECRET
    TESTREFERENCES_SYNCHRONIZATIONSECRET
    CONNECTIONSTRING_SYNCHRONIZATIONSECRET
)

func (i SynchronizationSecret) String() string {
    return []string{"NONE", "USERNAME", "PASSWORD", "SECRETTOKEN", "APPKEY", "BASEADDRESS", "CLIENTIDENTIFIER", "CLIENTSECRET", "SINGLESIGNONTYPE", "SANDBOX", "URL", "DOMAIN", "CONSUMERKEY", "CONSUMERSECRET", "TOKENKEY", "TOKENEXPIRATION", "OAUTH2ACCESSTOKEN", "OAUTH2ACCESSTOKENCREATIONTIME", "OAUTH2REFRESHTOKEN", "SYNCALL", "INSTANCENAME", "OAUTH2CLIENTID", "OAUTH2CLIENTSECRET", "COMPANYID", "UPDATEKEYONSOFTDELETE", "SYNCHRONIZATIONSCHEDULE", "SYSTEMOFRECORD", "SANDBOXNAME", "ENFORCEDOMAIN", "SYNCNOTIFICATIONSETTINGS", "SKIPOUTOFSCOPEDELETIONS", "OAUTH2AUTHORIZATIONCODE", "OAUTH2REDIRECTURI", "APPLICATIONTEMPLATEIDENTIFIER", "OAUTH2TOKENEXCHANGEURI", "OAUTH2AUTHORIZATIONURI", "AUTHENTICATIONTYPE", "SERVER", "PERFORMINBOUNDENTITLEMENTGRANTS", "HARDDELETESENABLED", "SYNCAGENTCOMPATIBILITYKEY", "SYNCAGENTADCONTAINER", "VALIDATEDOMAIN", "TESTREFERENCES", "CONNECTIONSTRING"}[i]
}
func ParseSynchronizationSecret(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "NONE":
            return NONE_SYNCHRONIZATIONSECRET, nil
        case "USERNAME":
            return USERNAME_SYNCHRONIZATIONSECRET, nil
        case "PASSWORD":
            return PASSWORD_SYNCHRONIZATIONSECRET, nil
        case "SECRETTOKEN":
            return SECRETTOKEN_SYNCHRONIZATIONSECRET, nil
        case "APPKEY":
            return APPKEY_SYNCHRONIZATIONSECRET, nil
        case "BASEADDRESS":
            return BASEADDRESS_SYNCHRONIZATIONSECRET, nil
        case "CLIENTIDENTIFIER":
            return CLIENTIDENTIFIER_SYNCHRONIZATIONSECRET, nil
        case "CLIENTSECRET":
            return CLIENTSECRET_SYNCHRONIZATIONSECRET, nil
        case "SINGLESIGNONTYPE":
            return SINGLESIGNONTYPE_SYNCHRONIZATIONSECRET, nil
        case "SANDBOX":
            return SANDBOX_SYNCHRONIZATIONSECRET, nil
        case "URL":
            return URL_SYNCHRONIZATIONSECRET, nil
        case "DOMAIN":
            return DOMAIN_SYNCHRONIZATIONSECRET, nil
        case "CONSUMERKEY":
            return CONSUMERKEY_SYNCHRONIZATIONSECRET, nil
        case "CONSUMERSECRET":
            return CONSUMERSECRET_SYNCHRONIZATIONSECRET, nil
        case "TOKENKEY":
            return TOKENKEY_SYNCHRONIZATIONSECRET, nil
        case "TOKENEXPIRATION":
            return TOKENEXPIRATION_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2ACCESSTOKEN":
            return OAUTH2ACCESSTOKEN_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2ACCESSTOKENCREATIONTIME":
            return OAUTH2ACCESSTOKENCREATIONTIME_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2REFRESHTOKEN":
            return OAUTH2REFRESHTOKEN_SYNCHRONIZATIONSECRET, nil
        case "SYNCALL":
            return SYNCALL_SYNCHRONIZATIONSECRET, nil
        case "INSTANCENAME":
            return INSTANCENAME_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2CLIENTID":
            return OAUTH2CLIENTID_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2CLIENTSECRET":
            return OAUTH2CLIENTSECRET_SYNCHRONIZATIONSECRET, nil
        case "COMPANYID":
            return COMPANYID_SYNCHRONIZATIONSECRET, nil
        case "UPDATEKEYONSOFTDELETE":
            return UPDATEKEYONSOFTDELETE_SYNCHRONIZATIONSECRET, nil
        case "SYNCHRONIZATIONSCHEDULE":
            return SYNCHRONIZATIONSCHEDULE_SYNCHRONIZATIONSECRET, nil
        case "SYSTEMOFRECORD":
            return SYSTEMOFRECORD_SYNCHRONIZATIONSECRET, nil
        case "SANDBOXNAME":
            return SANDBOXNAME_SYNCHRONIZATIONSECRET, nil
        case "ENFORCEDOMAIN":
            return ENFORCEDOMAIN_SYNCHRONIZATIONSECRET, nil
        case "SYNCNOTIFICATIONSETTINGS":
            return SYNCNOTIFICATIONSETTINGS_SYNCHRONIZATIONSECRET, nil
        case "SKIPOUTOFSCOPEDELETIONS":
            return SKIPOUTOFSCOPEDELETIONS_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2AUTHORIZATIONCODE":
            return OAUTH2AUTHORIZATIONCODE_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2REDIRECTURI":
            return OAUTH2REDIRECTURI_SYNCHRONIZATIONSECRET, nil
        case "APPLICATIONTEMPLATEIDENTIFIER":
            return APPLICATIONTEMPLATEIDENTIFIER_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2TOKENEXCHANGEURI":
            return OAUTH2TOKENEXCHANGEURI_SYNCHRONIZATIONSECRET, nil
        case "OAUTH2AUTHORIZATIONURI":
            return OAUTH2AUTHORIZATIONURI_SYNCHRONIZATIONSECRET, nil
        case "AUTHENTICATIONTYPE":
            return AUTHENTICATIONTYPE_SYNCHRONIZATIONSECRET, nil
        case "SERVER":
            return SERVER_SYNCHRONIZATIONSECRET, nil
        case "PERFORMINBOUNDENTITLEMENTGRANTS":
            return PERFORMINBOUNDENTITLEMENTGRANTS_SYNCHRONIZATIONSECRET, nil
        case "HARDDELETESENABLED":
            return HARDDELETESENABLED_SYNCHRONIZATIONSECRET, nil
        case "SYNCAGENTCOMPATIBILITYKEY":
            return SYNCAGENTCOMPATIBILITYKEY_SYNCHRONIZATIONSECRET, nil
        case "SYNCAGENTADCONTAINER":
            return SYNCAGENTADCONTAINER_SYNCHRONIZATIONSECRET, nil
        case "VALIDATEDOMAIN":
            return VALIDATEDOMAIN_SYNCHRONIZATIONSECRET, nil
        case "TESTREFERENCES":
            return TESTREFERENCES_SYNCHRONIZATIONSECRET, nil
        case "CONNECTIONSTRING":
            return CONNECTIONSTRING_SYNCHRONIZATIONSECRET, nil
    }
    return 0, errors.New("Unknown SynchronizationSecret value: " + v)
}
func SerializeSynchronizationSecret(values []SynchronizationSecret) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
