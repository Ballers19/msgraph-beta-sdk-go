package graph

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55 "github.com/microsoft/kiota/abstractions/go/serialization"
)

// 
type MalwareStateForWindowsDevice struct {
    Entity
    // Number of times the malware is detected
    detectionCount *int32;
    // Device name
    deviceName *string;
    // Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
    executionState *WindowsMalwareExecutionState;
    // Initial detection datetime of the malware
    initialDetectionDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time;
    // The last time this particular threat was changed
    lastStateChangeDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time;
    // Threat status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
    threatState *WindowsMalwareThreatState;
}
// Instantiates a new malwareStateForWindowsDevice and sets the default values.
func NewMalwareStateForWindowsDevice()(*MalwareStateForWindowsDevice) {
    m := &MalwareStateForWindowsDevice{
        Entity: *NewEntity(),
    }
    return m
}
// Gets the detectionCount property value. Number of times the malware is detected
func (m *MalwareStateForWindowsDevice) GetDetectionCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.detectionCount
    }
}
// Gets the deviceName property value. Device name
func (m *MalwareStateForWindowsDevice) GetDeviceName()(*string) {
    if m == nil {
        return nil
    } else {
        return m.deviceName
    }
}
// Gets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
func (m *MalwareStateForWindowsDevice) GetExecutionState()(*WindowsMalwareExecutionState) {
    if m == nil {
        return nil
    } else {
        return m.executionState
    }
}
// Gets the initialDetectionDateTime property value. Initial detection datetime of the malware
func (m *MalwareStateForWindowsDevice) GetInitialDetectionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.initialDetectionDateTime
    }
}
// Gets the lastStateChangeDateTime property value. The last time this particular threat was changed
func (m *MalwareStateForWindowsDevice) GetLastStateChangeDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.lastStateChangeDateTime
    }
}
// Gets the threatState property value. Threat status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
func (m *MalwareStateForWindowsDevice) GetThreatState()(*WindowsMalwareThreatState) {
    if m == nil {
        return nil
    } else {
        return m.threatState
    }
}
// The deserialization information for the current model
func (m *MalwareStateForWindowsDevice) GetFieldDeserializers()(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["detectionCount"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDetectionCount(val)
        }
        return nil
    }
    res["deviceName"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDeviceName(val)
        }
        return nil
    }
    res["executionState"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareExecutionState)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsMalwareExecutionState)
            m.SetExecutionState(&cast)
        }
        return nil
    }
    res["initialDetectionDateTime"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetInitialDetectionDateTime(val)
        }
        return nil
    }
    res["lastStateChangeDateTime"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLastStateChangeDateTime(val)
        }
        return nil
    }
    res["threatState"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareThreatState)
        if err != nil {
            return err
        }
        if val != nil {
            cast := val.(WindowsMalwareThreatState)
            m.SetThreatState(&cast)
        }
        return nil
    }
    return res
}
func (m *MalwareStateForWindowsDevice) IsNil()(bool) {
    return m == nil
}
// Serializes information the current object
// Parameters:
//  - writer : Serialization writer to use to serialize this model
func (m *MalwareStateForWindowsDevice) Serialize(writer i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteInt32Value("detectionCount", m.GetDetectionCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("deviceName", m.GetDeviceName())
        if err != nil {
            return err
        }
    }
    if m.GetExecutionState() != nil {
        cast := m.GetExecutionState().String()
        err = writer.WriteStringValue("executionState", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("initialDetectionDateTime", m.GetInitialDetectionDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("lastStateChangeDateTime", m.GetLastStateChangeDateTime())
        if err != nil {
            return err
        }
    }
    if m.GetThreatState() != nil {
        cast := m.GetThreatState().String()
        err = writer.WriteStringValue("threatState", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// Sets the detectionCount property value. Number of times the malware is detected
// Parameters:
//  - value : Value to set for the detectionCount property.
func (m *MalwareStateForWindowsDevice) SetDetectionCount(value *int32)() {
    m.detectionCount = value
}
// Sets the deviceName property value. Device name
// Parameters:
//  - value : Value to set for the deviceName property.
func (m *MalwareStateForWindowsDevice) SetDeviceName(value *string)() {
    m.deviceName = value
}
// Sets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
// Parameters:
//  - value : Value to set for the executionState property.
func (m *MalwareStateForWindowsDevice) SetExecutionState(value *WindowsMalwareExecutionState)() {
    m.executionState = value
}
// Sets the initialDetectionDateTime property value. Initial detection datetime of the malware
// Parameters:
//  - value : Value to set for the initialDetectionDateTime property.
func (m *MalwareStateForWindowsDevice) SetInitialDetectionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.initialDetectionDateTime = value
}
// Sets the lastStateChangeDateTime property value. The last time this particular threat was changed
// Parameters:
//  - value : Value to set for the lastStateChangeDateTime property.
func (m *MalwareStateForWindowsDevice) SetLastStateChangeDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.lastStateChangeDateTime = value
}
// Sets the threatState property value. Threat status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
// Parameters:
//  - value : Value to set for the threatState property.
func (m *MalwareStateForWindowsDevice) SetThreatState(value *WindowsMalwareThreatState)() {
    m.threatState = value
}
