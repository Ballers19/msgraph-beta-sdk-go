package graph
import (
    "strings"
    "errors"
)
// 
type MessageEventType int

const (
    RECEIVED_MESSAGEEVENTTYPE MessageEventType = iota
    SENT_MESSAGEEVENTTYPE
    DELIVERED_MESSAGEEVENTTYPE
    FAILED_MESSAGEEVENTTYPE
    PROCESSINGFAILED_MESSAGEEVENTTYPE
    DISTRIBUTIONGROUPEXPANDED_MESSAGEEVENTTYPE
    SUBMITTED_MESSAGEEVENTTYPE
    DELAYED_MESSAGEEVENTTYPE
    REDIRECTED_MESSAGEEVENTTYPE
    RESOLVED_MESSAGEEVENTTYPE
    DROPPED_MESSAGEEVENTTYPE
    RECIPIENTSADDED_MESSAGEEVENTTYPE
    MALWAREDETECTED_MESSAGEEVENTTYPE
    MALWAREDETECTEDINMESSAGE_MESSAGEEVENTTYPE
    MALWAREDETECTEDINATTACHMENT_MESSAGEEVENTTYPE
    TTZAPPED_MESSAGEEVENTTYPE
    TTDELIVERED_MESSAGEEVENTTYPE
    SPAMDETECTED_MESSAGEEVENTTYPE
    TRANSPORTRULETRIGGERED_MESSAGEEVENTTYPE
    DLPRULETRIGGERED_MESSAGEEVENTTYPE
    JOURNALED_MESSAGEEVENTTYPE
    UNKNOWNFUTUREVALUE_MESSAGEEVENTTYPE
)

func (i MessageEventType) String() string {
    return []string{"RECEIVED", "SENT", "DELIVERED", "FAILED", "PROCESSINGFAILED", "DISTRIBUTIONGROUPEXPANDED", "SUBMITTED", "DELAYED", "REDIRECTED", "RESOLVED", "DROPPED", "RECIPIENTSADDED", "MALWAREDETECTED", "MALWAREDETECTEDINMESSAGE", "MALWAREDETECTEDINATTACHMENT", "TTZAPPED", "TTDELIVERED", "SPAMDETECTED", "TRANSPORTRULETRIGGERED", "DLPRULETRIGGERED", "JOURNALED", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseMessageEventType(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "RECEIVED":
            return RECEIVED_MESSAGEEVENTTYPE, nil
        case "SENT":
            return SENT_MESSAGEEVENTTYPE, nil
        case "DELIVERED":
            return DELIVERED_MESSAGEEVENTTYPE, nil
        case "FAILED":
            return FAILED_MESSAGEEVENTTYPE, nil
        case "PROCESSINGFAILED":
            return PROCESSINGFAILED_MESSAGEEVENTTYPE, nil
        case "DISTRIBUTIONGROUPEXPANDED":
            return DISTRIBUTIONGROUPEXPANDED_MESSAGEEVENTTYPE, nil
        case "SUBMITTED":
            return SUBMITTED_MESSAGEEVENTTYPE, nil
        case "DELAYED":
            return DELAYED_MESSAGEEVENTTYPE, nil
        case "REDIRECTED":
            return REDIRECTED_MESSAGEEVENTTYPE, nil
        case "RESOLVED":
            return RESOLVED_MESSAGEEVENTTYPE, nil
        case "DROPPED":
            return DROPPED_MESSAGEEVENTTYPE, nil
        case "RECIPIENTSADDED":
            return RECIPIENTSADDED_MESSAGEEVENTTYPE, nil
        case "MALWAREDETECTED":
            return MALWAREDETECTED_MESSAGEEVENTTYPE, nil
        case "MALWAREDETECTEDINMESSAGE":
            return MALWAREDETECTEDINMESSAGE_MESSAGEEVENTTYPE, nil
        case "MALWAREDETECTEDINATTACHMENT":
            return MALWAREDETECTEDINATTACHMENT_MESSAGEEVENTTYPE, nil
        case "TTZAPPED":
            return TTZAPPED_MESSAGEEVENTTYPE, nil
        case "TTDELIVERED":
            return TTDELIVERED_MESSAGEEVENTTYPE, nil
        case "SPAMDETECTED":
            return SPAMDETECTED_MESSAGEEVENTTYPE, nil
        case "TRANSPORTRULETRIGGERED":
            return TRANSPORTRULETRIGGERED_MESSAGEEVENTTYPE, nil
        case "DLPRULETRIGGERED":
            return DLPRULETRIGGERED_MESSAGEEVENTTYPE, nil
        case "JOURNALED":
            return JOURNALED_MESSAGEEVENTTYPE, nil
        case "UNKNOWNFUTUREVALUE":
            return UNKNOWNFUTUREVALUE_MESSAGEEVENTTYPE, nil
    }
    return 0, errors.New("Unknown MessageEventType value: " + v)
}
func SerializeMessageEventType(values []MessageEventType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
