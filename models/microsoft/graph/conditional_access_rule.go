package graph
import (
    "strings"
    "errors"
)
// 
type ConditionalAccessRule int

const (
    ALLAPPS_CONDITIONALACCESSRULE ConditionalAccessRule = iota
    FIRSTPARTYAPPS_CONDITIONALACCESSRULE
    OFFICE365_CONDITIONALACCESSRULE
    APPID_CONDITIONALACCESSRULE
    ACR_CONDITIONALACCESSRULE
    APPFILTER_CONDITIONALACCESSRULE
    ALLUSERS_CONDITIONALACCESSRULE
    GUEST_CONDITIONALACCESSRULE
    GROUPID_CONDITIONALACCESSRULE
    ROLEID_CONDITIONALACCESSRULE
    USERID_CONDITIONALACCESSRULE
    ALLDEVICEPLATFORMS_CONDITIONALACCESSRULE
    DEVICEPLATFORM_CONDITIONALACCESSRULE
    ALLLOCATIONS_CONDITIONALACCESSRULE
    INSIDECORPNET_CONDITIONALACCESSRULE
    ALLTRUSTEDLOCATIONS_CONDITIONALACCESSRULE
    LOCATIONID_CONDITIONALACCESSRULE
    ALLDEVICES_CONDITIONALACCESSRULE
    DEVICEFILTER_CONDITIONALACCESSRULE
    DEVICESTATE_CONDITIONALACCESSRULE
    UNKNOWNFUTUREVALUE_CONDITIONALACCESSRULE
    DEVICEFILTERINCLUDERULENOTMATCHED_CONDITIONALACCESSRULE
    ALLDEVICESTATES_CONDITIONALACCESSRULE
)

func (i ConditionalAccessRule) String() string {
    return []string{"ALLAPPS", "FIRSTPARTYAPPS", "OFFICE365", "APPID", "ACR", "APPFILTER", "ALLUSERS", "GUEST", "GROUPID", "ROLEID", "USERID", "ALLDEVICEPLATFORMS", "DEVICEPLATFORM", "ALLLOCATIONS", "INSIDECORPNET", "ALLTRUSTEDLOCATIONS", "LOCATIONID", "ALLDEVICES", "DEVICEFILTER", "DEVICESTATE", "UNKNOWNFUTUREVALUE", "DEVICEFILTERINCLUDERULENOTMATCHED", "ALLDEVICESTATES"}[i]
}
func ParseConditionalAccessRule(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "ALLAPPS":
            return ALLAPPS_CONDITIONALACCESSRULE, nil
        case "FIRSTPARTYAPPS":
            return FIRSTPARTYAPPS_CONDITIONALACCESSRULE, nil
        case "OFFICE365":
            return OFFICE365_CONDITIONALACCESSRULE, nil
        case "APPID":
            return APPID_CONDITIONALACCESSRULE, nil
        case "ACR":
            return ACR_CONDITIONALACCESSRULE, nil
        case "APPFILTER":
            return APPFILTER_CONDITIONALACCESSRULE, nil
        case "ALLUSERS":
            return ALLUSERS_CONDITIONALACCESSRULE, nil
        case "GUEST":
            return GUEST_CONDITIONALACCESSRULE, nil
        case "GROUPID":
            return GROUPID_CONDITIONALACCESSRULE, nil
        case "ROLEID":
            return ROLEID_CONDITIONALACCESSRULE, nil
        case "USERID":
            return USERID_CONDITIONALACCESSRULE, nil
        case "ALLDEVICEPLATFORMS":
            return ALLDEVICEPLATFORMS_CONDITIONALACCESSRULE, nil
        case "DEVICEPLATFORM":
            return DEVICEPLATFORM_CONDITIONALACCESSRULE, nil
        case "ALLLOCATIONS":
            return ALLLOCATIONS_CONDITIONALACCESSRULE, nil
        case "INSIDECORPNET":
            return INSIDECORPNET_CONDITIONALACCESSRULE, nil
        case "ALLTRUSTEDLOCATIONS":
            return ALLTRUSTEDLOCATIONS_CONDITIONALACCESSRULE, nil
        case "LOCATIONID":
            return LOCATIONID_CONDITIONALACCESSRULE, nil
        case "ALLDEVICES":
            return ALLDEVICES_CONDITIONALACCESSRULE, nil
        case "DEVICEFILTER":
            return DEVICEFILTER_CONDITIONALACCESSRULE, nil
        case "DEVICESTATE":
            return DEVICESTATE_CONDITIONALACCESSRULE, nil
        case "UNKNOWNFUTUREVALUE":
            return UNKNOWNFUTUREVALUE_CONDITIONALACCESSRULE, nil
        case "DEVICEFILTERINCLUDERULENOTMATCHED":
            return DEVICEFILTERINCLUDERULENOTMATCHED_CONDITIONALACCESSRULE, nil
        case "ALLDEVICESTATES":
            return ALLDEVICESTATES_CONDITIONALACCESSRULE, nil
    }
    return 0, errors.New("Unknown ConditionalAccessRule value: " + v)
}
func SerializeConditionalAccessRule(values []ConditionalAccessRule) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
