package graph
import (
    "strings"
    "errors"
)
type PrinterProcessingStateReason int

const (
    PAUSED_PRINTERPROCESSINGSTATEREASON PrinterProcessingStateReason = iota
    MEDIAJAM_PRINTERPROCESSINGSTATEREASON
    MEDIANEEDED_PRINTERPROCESSINGSTATEREASON
    MEDIALOW_PRINTERPROCESSINGSTATEREASON
    MEDIAEMPTY_PRINTERPROCESSINGSTATEREASON
    COVEROPEN_PRINTERPROCESSINGSTATEREASON
    INTERLOCKOPEN_PRINTERPROCESSINGSTATEREASON
    OUTPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON
    OUTPUTAREAFULL_PRINTERPROCESSINGSTATEREASON
    MARKERSUPPLYLOW_PRINTERPROCESSINGSTATEREASON
    MARKERSUPPLYEMPTY_PRINTERPROCESSINGSTATEREASON
    INPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON
    OUTPUTAREAALMOSTFULL_PRINTERPROCESSINGSTATEREASON
    MARKERWASTEALMOSTFULL_PRINTERPROCESSINGSTATEREASON
    MARKERWASTEFULL_PRINTERPROCESSINGSTATEREASON
    FUSEROVERTEMP_PRINTERPROCESSINGSTATEREASON
    FUSERUNDERTEMP_PRINTERPROCESSINGSTATEREASON
    OTHER_PRINTERPROCESSINGSTATEREASON
    NONE_PRINTERPROCESSINGSTATEREASON
    MOVINGTOPAUSED_PRINTERPROCESSINGSTATEREASON
    SHUTDOWN_PRINTERPROCESSINGSTATEREASON
    CONNECTINGTODEVICE_PRINTERPROCESSINGSTATEREASON
    TIMEDOUT_PRINTERPROCESSINGSTATEREASON
    STOPPING_PRINTERPROCESSINGSTATEREASON
    STOPPEDPARTIALLY_PRINTERPROCESSINGSTATEREASON
    TONERLOW_PRINTERPROCESSINGSTATEREASON
    TONEREMPTY_PRINTERPROCESSINGSTATEREASON
    SPOOLAREAFULL_PRINTERPROCESSINGSTATEREASON
    DOOROPEN_PRINTERPROCESSINGSTATEREASON
    OPTICALPHOTOCONDUCTORNEARENDOFLIFE_PRINTERPROCESSINGSTATEREASON
    OPTICALPHOTOCONDUCTORLIFEOVER_PRINTERPROCESSINGSTATEREASON
    DEVELOPERLOW_PRINTERPROCESSINGSTATEREASON
    DEVELOPEREMPTY_PRINTERPROCESSINGSTATEREASON
    INTERPRETERRESOURCEUNAVAILABLE_PRINTERPROCESSINGSTATEREASON
    UNKNOWNFUTUREVALUE_PRINTERPROCESSINGSTATEREASON
)

func (i PrinterProcessingStateReason) String() string {
    return []string{"PAUSED", "MEDIAJAM", "MEDIANEEDED", "MEDIALOW", "MEDIAEMPTY", "COVEROPEN", "INTERLOCKOPEN", "OUTPUTTRAYMISSING", "OUTPUTAREAFULL", "MARKERSUPPLYLOW", "MARKERSUPPLYEMPTY", "INPUTTRAYMISSING", "OUTPUTAREAALMOSTFULL", "MARKERWASTEALMOSTFULL", "MARKERWASTEFULL", "FUSEROVERTEMP", "FUSERUNDERTEMP", "OTHER", "NONE", "MOVINGTOPAUSED", "SHUTDOWN", "CONNECTINGTODEVICE", "TIMEDOUT", "STOPPING", "STOPPEDPARTIALLY", "TONERLOW", "TONEREMPTY", "SPOOLAREAFULL", "DOOROPEN", "OPTICALPHOTOCONDUCTORNEARENDOFLIFE", "OPTICALPHOTOCONDUCTORLIFEOVER", "DEVELOPERLOW", "DEVELOPEREMPTY", "INTERPRETERRESOURCEUNAVAILABLE", "UNKNOWNFUTUREVALUE"}[i]
}
func ParsePrinterProcessingStateReason(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "PAUSED":
            return PAUSED_PRINTERPROCESSINGSTATEREASON, nil
        case "MEDIAJAM":
            return MEDIAJAM_PRINTERPROCESSINGSTATEREASON, nil
        case "MEDIANEEDED":
            return MEDIANEEDED_PRINTERPROCESSINGSTATEREASON, nil
        case "MEDIALOW":
            return MEDIALOW_PRINTERPROCESSINGSTATEREASON, nil
        case "MEDIAEMPTY":
            return MEDIAEMPTY_PRINTERPROCESSINGSTATEREASON, nil
        case "COVEROPEN":
            return COVEROPEN_PRINTERPROCESSINGSTATEREASON, nil
        case "INTERLOCKOPEN":
            return INTERLOCKOPEN_PRINTERPROCESSINGSTATEREASON, nil
        case "OUTPUTTRAYMISSING":
            return OUTPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON, nil
        case "OUTPUTAREAFULL":
            return OUTPUTAREAFULL_PRINTERPROCESSINGSTATEREASON, nil
        case "MARKERSUPPLYLOW":
            return MARKERSUPPLYLOW_PRINTERPROCESSINGSTATEREASON, nil
        case "MARKERSUPPLYEMPTY":
            return MARKERSUPPLYEMPTY_PRINTERPROCESSINGSTATEREASON, nil
        case "INPUTTRAYMISSING":
            return INPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON, nil
        case "OUTPUTAREAALMOSTFULL":
            return OUTPUTAREAALMOSTFULL_PRINTERPROCESSINGSTATEREASON, nil
        case "MARKERWASTEALMOSTFULL":
            return MARKERWASTEALMOSTFULL_PRINTERPROCESSINGSTATEREASON, nil
        case "MARKERWASTEFULL":
            return MARKERWASTEFULL_PRINTERPROCESSINGSTATEREASON, nil
        case "FUSEROVERTEMP":
            return FUSEROVERTEMP_PRINTERPROCESSINGSTATEREASON, nil
        case "FUSERUNDERTEMP":
            return FUSERUNDERTEMP_PRINTERPROCESSINGSTATEREASON, nil
        case "OTHER":
            return OTHER_PRINTERPROCESSINGSTATEREASON, nil
        case "NONE":
            return NONE_PRINTERPROCESSINGSTATEREASON, nil
        case "MOVINGTOPAUSED":
            return MOVINGTOPAUSED_PRINTERPROCESSINGSTATEREASON, nil
        case "SHUTDOWN":
            return SHUTDOWN_PRINTERPROCESSINGSTATEREASON, nil
        case "CONNECTINGTODEVICE":
            return CONNECTINGTODEVICE_PRINTERPROCESSINGSTATEREASON, nil
        case "TIMEDOUT":
            return TIMEDOUT_PRINTERPROCESSINGSTATEREASON, nil
        case "STOPPING":
            return STOPPING_PRINTERPROCESSINGSTATEREASON, nil
        case "STOPPEDPARTIALLY":
            return STOPPEDPARTIALLY_PRINTERPROCESSINGSTATEREASON, nil
        case "TONERLOW":
            return TONERLOW_PRINTERPROCESSINGSTATEREASON, nil
        case "TONEREMPTY":
            return TONEREMPTY_PRINTERPROCESSINGSTATEREASON, nil
        case "SPOOLAREAFULL":
            return SPOOLAREAFULL_PRINTERPROCESSINGSTATEREASON, nil
        case "DOOROPEN":
            return DOOROPEN_PRINTERPROCESSINGSTATEREASON, nil
        case "OPTICALPHOTOCONDUCTORNEARENDOFLIFE":
            return OPTICALPHOTOCONDUCTORNEARENDOFLIFE_PRINTERPROCESSINGSTATEREASON, nil
        case "OPTICALPHOTOCONDUCTORLIFEOVER":
            return OPTICALPHOTOCONDUCTORLIFEOVER_PRINTERPROCESSINGSTATEREASON, nil
        case "DEVELOPERLOW":
            return DEVELOPERLOW_PRINTERPROCESSINGSTATEREASON, nil
        case "DEVELOPEREMPTY":
            return DEVELOPEREMPTY_PRINTERPROCESSINGSTATEREASON, nil
        case "INTERPRETERRESOURCEUNAVAILABLE":
            return INTERPRETERRESOURCEUNAVAILABLE_PRINTERPROCESSINGSTATEREASON, nil
        case "UNKNOWNFUTUREVALUE":
            return UNKNOWNFUTUREVALUE_PRINTERPROCESSINGSTATEREASON, nil
    }
    return 0, errors.New("Unknown PrinterProcessingStateReason value: " + v)
}
func SerializePrinterProcessingStateReason(values []PrinterProcessingStateReason) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
