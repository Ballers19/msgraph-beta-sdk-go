package graph
import (
    "strings"
    "errors"
)
type AdvancedBitLockerState int

const (
    SUCCESS_ADVANCEDBITLOCKERSTATE AdvancedBitLockerState = iota
    NOUSERCONSENT_ADVANCEDBITLOCKERSTATE
    OSVOLUMEUNPROTECTED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMONLYREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMPINREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMPINSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE
    RECOVERYKEYBACKUPFAILED_ADVANCEDBITLOCKERSTATE
    FIXEDDRIVENOTENCRYPTED_ADVANCEDBITLOCKERSTATE
    FIXEDDRIVEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE
    LOGGEDONUSERNONADMIN_ADVANCEDBITLOCKERSTATE
    WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED_ADVANCEDBITLOCKERSTATE
    TPMNOTAVAILABLE_ADVANCEDBITLOCKERSTATE
    TPMNOTREADY_ADVANCEDBITLOCKERSTATE
    NETWORKERROR_ADVANCEDBITLOCKERSTATE
)

func (i AdvancedBitLockerState) String() string {
    return []string{"SUCCESS", "NOUSERCONSENT", "OSVOLUMEUNPROTECTED", "OSVOLUMETPMREQUIRED", "OSVOLUMETPMONLYREQUIRED", "OSVOLUMETPMPINREQUIRED", "OSVOLUMETPMSTARTUPKEYREQUIRED", "OSVOLUMETPMPINSTARTUPKEYREQUIRED", "OSVOLUMEENCRYPTIONMETHODMISMATCH", "RECOVERYKEYBACKUPFAILED", "FIXEDDRIVENOTENCRYPTED", "FIXEDDRIVEENCRYPTIONMETHODMISMATCH", "LOGGEDONUSERNONADMIN", "WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED", "TPMNOTAVAILABLE", "TPMNOTREADY", "NETWORKERROR"}[i]
}
func ParseAdvancedBitLockerState(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "SUCCESS":
            return SUCCESS_ADVANCEDBITLOCKERSTATE, nil
        case "NOUSERCONSENT":
            return NOUSERCONSENT_ADVANCEDBITLOCKERSTATE, nil
        case "OSVOLUMEUNPROTECTED":
            return OSVOLUMEUNPROTECTED_ADVANCEDBITLOCKERSTATE, nil
        case "OSVOLUMETPMREQUIRED":
            return OSVOLUMETPMREQUIRED_ADVANCEDBITLOCKERSTATE, nil
        case "OSVOLUMETPMONLYREQUIRED":
            return OSVOLUMETPMONLYREQUIRED_ADVANCEDBITLOCKERSTATE, nil
        case "OSVOLUMETPMPINREQUIRED":
            return OSVOLUMETPMPINREQUIRED_ADVANCEDBITLOCKERSTATE, nil
        case "OSVOLUMETPMSTARTUPKEYREQUIRED":
            return OSVOLUMETPMSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE, nil
        case "OSVOLUMETPMPINSTARTUPKEYREQUIRED":
            return OSVOLUMETPMPINSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE, nil
        case "OSVOLUMEENCRYPTIONMETHODMISMATCH":
            return OSVOLUMEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE, nil
        case "RECOVERYKEYBACKUPFAILED":
            return RECOVERYKEYBACKUPFAILED_ADVANCEDBITLOCKERSTATE, nil
        case "FIXEDDRIVENOTENCRYPTED":
            return FIXEDDRIVENOTENCRYPTED_ADVANCEDBITLOCKERSTATE, nil
        case "FIXEDDRIVEENCRYPTIONMETHODMISMATCH":
            return FIXEDDRIVEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE, nil
        case "LOGGEDONUSERNONADMIN":
            return LOGGEDONUSERNONADMIN_ADVANCEDBITLOCKERSTATE, nil
        case "WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED":
            return WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED_ADVANCEDBITLOCKERSTATE, nil
        case "TPMNOTAVAILABLE":
            return TPMNOTAVAILABLE_ADVANCEDBITLOCKERSTATE, nil
        case "TPMNOTREADY":
            return TPMNOTREADY_ADVANCEDBITLOCKERSTATE, nil
        case "NETWORKERROR":
            return NETWORKERROR_ADVANCEDBITLOCKERSTATE, nil
    }
    return 0, errors.New("Unknown AdvancedBitLockerState value: " + v)
}
func SerializeAdvancedBitLockerState(values []AdvancedBitLockerState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
