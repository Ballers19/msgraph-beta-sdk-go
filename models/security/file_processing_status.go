package security
import (
    "strings"
    "errors"
)
// Provides operations to manage the cases property of the microsoft.graph.security entity.
type FileProcessingStatus int

const (
    SUCCESS_FILEPROCESSINGSTATUS FileProcessingStatus = iota
    INTERNALERROR_FILEPROCESSINGSTATUS
    UNKNOWNERROR_FILEPROCESSINGSTATUS
    PROCESSINGTIMEOUT_FILEPROCESSINGSTATUS
    INVALIDFILEID_FILEPROCESSINGSTATUS
    FILESIZEISZERO_FILEPROCESSINGSTATUS
    FILESIZEISTOOLARGE_FILEPROCESSINGSTATUS
    FILEDEPTHLIMITEXCEEDED_FILEPROCESSINGSTATUS
    FILEBODYISTOOLONG_FILEPROCESSINGSTATUS
    FILETYPEISUNKNOWN_FILEPROCESSINGSTATUS
    FILETYPEISNOTSUPPORTED_FILEPROCESSINGSTATUS
    MALFORMEDFILE_FILEPROCESSINGSTATUS
    PROTECTEDFILE_FILEPROCESSINGSTATUS
    POISONFILE_FILEPROCESSINGSTATUS
    NOREVIEWSETSUMMARYGENERATED_FILEPROCESSINGSTATUS
    EXTRACTIONEXCEPTION_FILEPROCESSINGSTATUS
    OCRPROCESSINGTIMEOUT_FILEPROCESSINGSTATUS
    OCRFILESIZEEXCEEDSLIMIT_FILEPROCESSINGSTATUS
    UNKNOWNFUTUREVALUE_FILEPROCESSINGSTATUS
)

func (i FileProcessingStatus) String() string {
    return []string{"SUCCESS", "INTERNALERROR", "UNKNOWNERROR", "PROCESSINGTIMEOUT", "INVALIDFILEID", "FILESIZEISZERO", "FILESIZEISTOOLARGE", "FILEDEPTHLIMITEXCEEDED", "FILEBODYISTOOLONG", "FILETYPEISUNKNOWN", "FILETYPEISNOTSUPPORTED", "MALFORMEDFILE", "PROTECTEDFILE", "POISONFILE", "NOREVIEWSETSUMMARYGENERATED", "EXTRACTIONEXCEPTION", "OCRPROCESSINGTIMEOUT", "OCRFILESIZEEXCEEDSLIMIT", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseFileProcessingStatus(v string) (interface{}, error) {
    result := SUCCESS_FILEPROCESSINGSTATUS
    switch strings.ToUpper(v) {
        case "SUCCESS":
            result = SUCCESS_FILEPROCESSINGSTATUS
        case "INTERNALERROR":
            result = INTERNALERROR_FILEPROCESSINGSTATUS
        case "UNKNOWNERROR":
            result = UNKNOWNERROR_FILEPROCESSINGSTATUS
        case "PROCESSINGTIMEOUT":
            result = PROCESSINGTIMEOUT_FILEPROCESSINGSTATUS
        case "INVALIDFILEID":
            result = INVALIDFILEID_FILEPROCESSINGSTATUS
        case "FILESIZEISZERO":
            result = FILESIZEISZERO_FILEPROCESSINGSTATUS
        case "FILESIZEISTOOLARGE":
            result = FILESIZEISTOOLARGE_FILEPROCESSINGSTATUS
        case "FILEDEPTHLIMITEXCEEDED":
            result = FILEDEPTHLIMITEXCEEDED_FILEPROCESSINGSTATUS
        case "FILEBODYISTOOLONG":
            result = FILEBODYISTOOLONG_FILEPROCESSINGSTATUS
        case "FILETYPEISUNKNOWN":
            result = FILETYPEISUNKNOWN_FILEPROCESSINGSTATUS
        case "FILETYPEISNOTSUPPORTED":
            result = FILETYPEISNOTSUPPORTED_FILEPROCESSINGSTATUS
        case "MALFORMEDFILE":
            result = MALFORMEDFILE_FILEPROCESSINGSTATUS
        case "PROTECTEDFILE":
            result = PROTECTEDFILE_FILEPROCESSINGSTATUS
        case "POISONFILE":
            result = POISONFILE_FILEPROCESSINGSTATUS
        case "NOREVIEWSETSUMMARYGENERATED":
            result = NOREVIEWSETSUMMARYGENERATED_FILEPROCESSINGSTATUS
        case "EXTRACTIONEXCEPTION":
            result = EXTRACTIONEXCEPTION_FILEPROCESSINGSTATUS
        case "OCRPROCESSINGTIMEOUT":
            result = OCRPROCESSINGTIMEOUT_FILEPROCESSINGSTATUS
        case "OCRFILESIZEEXCEEDSLIMIT":
            result = OCRFILESIZEEXCEEDSLIMIT_FILEPROCESSINGSTATUS
        case "UNKNOWNFUTUREVALUE":
            result = UNKNOWNFUTUREVALUE_FILEPROCESSINGSTATUS
        default:
            return 0, errors.New("Unknown FileProcessingStatus value: " + v)
    }
    return &result, nil
}
func SerializeFileProcessingStatus(values []FileProcessingStatus) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
